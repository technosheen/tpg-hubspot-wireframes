{"file_contents":{"design_guidelines.md":{"content":"# TPG Homepage Design Guidelines - Ramp.com Style\n\n## Design Approach\n**Reference-Based Approach**: Inspired by Ramp.com's clean, minimalist SaaS aesthetic with focus on clarity and conversion optimization.\n\n## Core Design Elements\n\n### A. Color Palette\n**Primary**: \n- Light mode: White backgrounds with 220 15% 8% (dark charcoal) text\n- Dark mode: 220 15% 8% backgrounds with white text\n- Accent: 220 100% 50% (professional blue) for CTAs and key highlights\n\n**Supporting**:\n- Subtle grays: 220 10% 95% (light), 220 8% 60% (medium)\n- Success green: 142 71% 45% for metrics and positive indicators\n\n### B. Typography\n**Fonts**: Inter (primary), system fonts as fallback\n**Hierarchy**:\n- Hero headline: text-5xl/6xl, font-semibold\n- Section headers: text-3xl/4xl, font-medium  \n- Body text: text-lg, regular weight\n- Metrics/stats: text-2xl, font-bold\n\n### C. Layout System\n**Spacing**: Tailwind units of 4, 8, 12, 16, 24 for consistent rhythm\n**Grid**: max-w-6xl containers with generous px-8 horizontal padding\n**Sections**: py-16/py-24 vertical spacing between major sections\n\n### D. Component Library\n\n**Navigation**: \n- Clean header with logo left, minimal nav center, CTA button right\n- Sticky behavior with subtle shadow on scroll\n\n**Hero Section**:\n- Large headline with supporting subtext\n- Two-column layout: content left, visual element right\n- Primary CTA button (solid blue) + secondary link\n\n**Proof Bar**:\n- Horizontal logo carousel with subtle grayscale treatment\n- Key metrics displayed prominently with large numbers\n\n**Content Sections**:\n- Alternating left/right layouts for visual rhythm\n- Clean icons or simple illustrations\n- Generous whitespace and clear hierarchy\n\n**Testimonials**:\n- Card-based design with subtle borders\n- Company logos integrated tastefully\n- Quote marks and attribution styling\n\n**CTA Footer**:\n- Dark background section for contrast\n- Centered content with prominent button\n\n### E. Visual Elements\n**Dividers**: Thin horizontal lines (border-gray-200) between sections\n**Cards**: Subtle shadows and rounded corners (rounded-lg)\n**Buttons**: Rounded-md, solid primary style for main CTAs\n**Icons**: Minimalist line style, consistent sizing\n\n## Images\n**Hero Visual**: Abstract data visualization or clean illustration representing pipeline/funnel concepts - positioned right side of hero\n**Section Icons**: Simple line icons for each solution pillar (eye, pattern recognition, steering wheel metaphors)\n**Client Logos**: Grayscale treatment in proof bar and testimonials\n**No large background images** - maintains Ramp's clean aesthetic with strategic use of whitespace\n\n## Key Design Principles\n- **Clarity over cleverness**: Every element serves the conversion goal\n- **Generous whitespace**: Ramp's signature breathing room between elements  \n- **Subtle hierarchy**: Size, weight, and spacing create natural reading flow\n- **Minimal color palette**: Professional blues on clean whites/grays\n- **Performance-focused**: Clean code with fast loading times","size_bytes":3001},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# TPG Homepage Application\n\n## Overview\n\nThis is a modern React-based marketing website for TPG (The Pipeline Group), a company that provides SDR-as-a-Service solutions for B2B sales teams. The application is built as a single-page application featuring a clean, conversion-focused design inspired by Ramp.com's aesthetic. The site showcases TPG's value proposition of eliminating pipeline leaks and providing full visibility into go-to-market operations through AI-supported SDR teams and comprehensive data insights.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development patterns\n- **Routing**: Wouter for lightweight client-side routing with single-page application structure\n- **State Management**: TanStack React Query for server state management and caching\n- **Styling**: Tailwind CSS with custom design system based on shadcn/ui component library\n- **Component Architecture**: Modular component structure with reusable UI components and page-specific sections\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Design System\n- **Component Library**: shadcn/ui components with Radix UI primitives for accessibility\n- **Theme System**: Light/dark theme support with CSS custom properties\n- **Typography**: Inter font family with responsive typography scale\n- **Color Palette**: Professional blue accents (220 100% 50%) with neutral grays and charcoal text\n- **Layout**: Responsive grid system with max-w-6xl containers and consistent spacing scale\n\n### Backend Architecture\n- **Server**: Express.js with TypeScript for type-safe server development\n- **Development**: Hot module replacement and development middleware through Vite integration\n- **API Structure**: RESTful API design with /api prefix for all endpoints\n- **Error Handling**: Centralized error handling middleware with structured error responses\n\n### Data Storage\n- **Database**: PostgreSQL configured through Drizzle ORM for type-safe database operations\n- **Schema**: User management schema with UUID primary keys and password authentication\n- **Migrations**: Drizzle Kit for database schema management and migrations\n- **Development Storage**: In-memory storage fallback for development and testing\n\n### Content Management\n- **Static Assets**: Vite asset handling with optimized imports and bundling\n- **Generated Images**: AI-generated visuals stored in attached_assets directory\n- **Content Structure**: Component-based content management with props-driven customization\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL hosting via @neondatabase/serverless\n- **Connection Management**: connect-pg-simple for PostgreSQL session storage\n\n### UI and Design Libraries\n- **Radix UI**: Comprehensive set of accessible component primitives\n- **Lucide React**: Modern icon library for consistent iconography\n- **Framer Motion**: Animation library for interactive elements and transitions\n- **Embla Carousel**: Lightweight carousel component for content display\n\n### Development Tools\n- **Drizzle ORM**: Type-safe database ORM with PostgreSQL dialect\n- **Zod**: Runtime type validation integrated with Drizzle schemas\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **TanStack React Query**: Server state management and caching solution\n\n### Styling and Theming\n- **Tailwind CSS**: Utility-first CSS framework with custom configuration\n- **Class Variance Authority**: Type-safe component variant management\n- **clsx**: Conditional CSS class composition utility\n- **date-fns**: Date manipulation and formatting library\n\n### Form and Validation\n- **React Hook Form**: Performant form management with minimal re-renders\n- **Hookform Resolvers**: Integration layer for form validation libraries\n\n### Font and Typography\n- **Google Fonts**: Inter font family loaded via CDN for optimal performance","size_bytes":4003},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":584},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport Home from \"@/pages/Home\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"light\">\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":833},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 220 15% 8%;\n\n  --border: 220 10% 90%;\n\n  --card: 0 0% 98%;\n\n  --card-foreground: 220 15% 8%;\n\n  --card-border: 220 10% 88%;\n\n  --sidebar: 220 10% 96%;\n\n  --sidebar-foreground: 220 15% 8%;\n\n  --sidebar-border: 220 10% 86%;\n\n  --sidebar-primary: 25 95% 53%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 220 8% 92%;\n\n  --sidebar-accent-foreground: 220 15% 8%;\n\n  --sidebar-ring: 25 95% 53%;\n\n  --popover: 220 8% 94%;\n\n  --popover-foreground: 220 15% 8%;\n\n  --popover-border: 220 10% 84%;\n\n  --primary: 25 95% 53%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 220 8% 90%;\n\n  --secondary-foreground: 220 15% 8%;\n\n  --muted: 220 8% 92%;\n\n  --muted-foreground: 220 8% 60%;\n\n  --accent: 220 12% 88%;\n\n  --accent-foreground: 220 15% 8%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 10% 80%;\n  --ring: 25 95% 53%;\n  --chart-1: 25 95% 53%;\n  --chart-2: 142 71% 45%;\n  --chart-3: 262 83% 58%;\n  --chart-4: 25 95% 53%;\n  --chart-5: 340 75% 55%;\n\n  --font-sans: Inter;\n  --font-serif: Architects Daughter;\n  --font-mono: Architects Daughter;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px rgba(0, 0, 0, 0.05);\n  --shadow-xs: 0px 1px 3px 0px rgba(0, 0, 0, 0.1), 0px 1px 2px 0px rgba(0, 0, 0, 0.06);\n  --shadow-sm: 0px 1px 3px 0px rgba(0, 0, 0, 0.1), 0px 1px 2px -1px rgba(0, 0, 0, 0.1);\n  --shadow: 0px 4px 6px -1px rgba(0, 0, 0, 0.1), 0px 2px 4px -1px rgba(0, 0, 0, 0.06);\n  --shadow-md: 0px 10px 15px -3px rgba(0, 0, 0, 0.1), 0px 4px 6px -2px rgba(0, 0, 0, 0.05);\n  --shadow-lg: 0px 20px 25px -5px rgba(0, 0, 0, 0.1), 0px 10px 10px -5px rgba(0, 0, 0, 0.04);\n  --shadow-xl: 0px 25px 50px -12px rgba(0, 0, 0, 0.25);\n  --shadow-2xl: 0px 25px 50px -12px rgba(0, 0, 0, 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 15% 8%;\n\n  --foreground: 0 0% 98%;\n\n  --border: 220 10% 18%;\n\n  --card: 220 12% 10%;\n\n  --card-foreground: 0 0% 98%;\n\n  --card-border: 220 10% 20%;\n\n  --sidebar: 220 15% 6%;\n\n  --sidebar-foreground: 0 0% 98%;\n\n  --sidebar-border: 220 10% 16%;\n\n  --sidebar-primary: 25 95% 53%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 220 12% 12%;\n\n  --sidebar-accent-foreground: 0 0% 98%;\n\n  --sidebar-ring: 25 95% 53%;\n\n  --popover: 220 10% 12%;\n\n  --popover-foreground: 0 0% 98%;\n\n  --popover-border: 220 10% 22%;\n\n  --primary: 25 95% 53%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 220 8% 18%;\n\n  --secondary-foreground: 0 0% 98%;\n\n  --muted: 220 8% 14%;\n\n  --muted-foreground: 220 8% 60%;\n\n  --accent: 220 12% 16%;\n\n  --accent-foreground: 0 0% 98%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  /* Used as the border around inputs. Dark mode: Should be a border that is light enough to have high contrast when rendered on a --card background. More contrast than standard --border */\n  --input: 220 10% 25%;\n  --ring: 25 95% 53%;\n  --chart-1: 220 100% 65%;\n  --chart-2: 142 71% 65%;\n  --chart-3: 262 83% 75%;\n  --chart-4: 25 95% 70%;\n  --chart-5: 340 75% 70%;\n\n  --shadow-2xs: 0px 1px 2px 0px rgba(0, 0, 0, 0.3);\n  --shadow-xs: 0px 1px 3px 0px rgba(0, 0, 0, 0.4), 0px 1px 2px 0px rgba(0, 0, 0, 0.3);\n  --shadow-sm: 0px 1px 3px 0px rgba(0, 0, 0, 0.4), 0px 1px 2px -1px rgba(0, 0, 0, 0.4);\n  --shadow: 0px 4px 6px -1px rgba(0, 0, 0, 0.4), 0px 2px 4px -1px rgba(0, 0, 0, 0.3);\n  --shadow-md: 0px 10px 15px -3px rgba(0, 0, 0, 0.4), 0px 4px 6px -2px rgba(0, 0, 0, 0.3);\n  --shadow-lg: 0px 20px 25px -5px rgba(0, 0, 0, 0.4), 0px 10px 10px -5px rgba(0, 0, 0, 0.2);\n  --shadow-xl: 0px 25px 50px -12px rgba(0, 0, 0, 0.6);\n  --shadow-2xl: 0px 25px 50px -12px rgba(0, 0, 0, 0.6);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":10387},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/CTAFooter.tsx":{"content":"import { Button } from \"@/components/ui/button\";\n\nexport default function CTAFooter() {\n  return (\n    <section className=\"py-24 px-8 bg-foreground text-background\">\n      <div className=\"max-w-6xl mx-auto text-center space-y-8\">\n        <h2 className=\"text-4xl font-medium\" data-testid=\"text-cta-headline\">\n          Never Compromise Your Pipeline. Start Today.\n        </h2>\n        <p className=\"text-lg opacity-90 max-w-2xl mx-auto leading-relaxed\" data-testid=\"text-cta-description\">\n          Join 125+ companies that have transformed their go-to-market operations with TPG's proven approach.\n        </p>\n        <Button \n          size=\"lg\" \n          variant=\"outline\" \n          className=\"bg-background text-foreground border-background hover:bg-background/90\"\n          data-testid=\"button-schedule-meeting\"\n        >\n          Schedule a Meeting\n        </Button>\n      </div>\n    </section>\n  );\n}","size_bytes":911},"client/src/components/Header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport ThemeToggle from \"@/components/ThemeToggle\";\n\nexport default function Header() {\n  return (\n    <header className=\"sticky top-0 z-50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b\">\n      <div className=\"max-w-6xl mx-auto px-8 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-8\">\n            <div className=\"text-xl font-semibold text-foreground\">\n              TPG\n            </div>\n            <nav className=\"hidden md:flex items-center gap-6\">\n              <a href=\"#solutions\" className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-solutions\">\n                Solutions\n              </a>\n              <a href=\"#results\" className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-results\">\n                Results\n              </a>\n              <a href=\"#process\" className=\"text-sm text-muted-foreground hover:text-foreground transition-colors\" data-testid=\"link-process\">\n                How It Works\n              </a>\n            </nav>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <ThemeToggle />\n            <Button data-testid=\"button-talk-to-tpg\">\n              Talk to TPG\n            </Button>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":1460},"client/src/components/HeroSection.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport ProcessAnimation from \"@/components/ProcessAnimation\";\n\nexport default function HeroSection() {\n  return (\n    <section className=\"py-20 px-8\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n          <div className=\"space-y-8\">\n            <div className=\"space-y-6\">\n              <h1 className=\"font-semibold text-[#000000] leading-tight\" data-testid=\"text-hero-headline\">\n                <div className=\"lg:text-5xl text-[#262626] text-[36px]\">We Help Companies Build</div>\n                <div className=\"text-6xl lg:text-7xl mt-2\" style={{ color: 'hsl(25 95% 53%)' }}>Predictable Pipeline</div>\n              </h1>\n              <p className=\"text-lg text-muted-foreground leading-relaxed\" data-testid=\"text-hero-subhead\">Our SDR-as-a-Service model combines AI-enabled SDR teams with 10+ layers of support functions, 28+ data sources and a full GTM tech stack so our clients can focus on selling.\n</p>\n            </div>\n          </div>\n          <div className=\"relative\">\n            <ProcessAnimation />\n          </div>\n        </div>\n        \n        {/* Centered CTAs under the hero section */}\n        <div className=\"mt-12 flex flex-col sm:flex-row gap-4 justify-center\">\n          <Button size=\"lg\" data-testid=\"button-talk-to-tpg-hero\">\n            Talk to TPG\n          </Button>\n          <Button variant=\"outline\" size=\"lg\" data-testid=\"button-see-how-it-works\">\n            See How It Works\n          </Button>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":1598},"client/src/components/ProblemSection.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { motion, AnimatePresence, useInView } from \"framer-motion\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { MousePointer, ChevronRight } from \"lucide-react\";\n\nexport default function ProblemSection() {\n  const sectionRef = useRef(null);\n  const isInView = useInView(sectionRef, { once: true, margin: \"-100px\" });\n  const [currentView, setCurrentView] = useState(\"overview\");\n\n  // Auto-cycle through executive dashboard views\n  useEffect(() => {\n    const sequence = [\n      { view: \"overview\", delay: 3000 },\n      { view: \"disposition\", delay: 3500 },\n      { view: \"pipeline\", delay: 3500 },\n      { view: \"performance\", delay: 3500 }\n    ];\n    \n    let timeoutId: NodeJS.Timeout;\n    let currentIndex = 0;\n    \n    const runSequence = () => {\n      const current = sequence[currentIndex];\n      setCurrentView(current.view);\n      \n      timeoutId = setTimeout(() => {\n        currentIndex = (currentIndex + 1) % sequence.length;\n        runSequence();\n      }, current.delay);\n    };\n    \n    runSequence();\n    \n    return () => clearTimeout(timeoutId);\n  }, []);\n\n  return (\n    <section ref={sectionRef} className=\"py-24 px-8\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"grid lg:grid-cols-2 gap-16 items-center\">\n          <div className=\"space-y-8\">\n            <div className=\"space-y-6\">\n              <h2 className=\"text-4xl font-medium text-foreground\" data-testid=\"text-reporting-headline\">\n                Bloomberg Terminal-Style Reporting\n              </h2>\n              <div className=\"space-y-4\">\n                <h3 className=\"text-xl font-medium text-foreground\" data-testid=\"text-reporting-subheading\">\n                  Visibility You've Never Seen Before\n                </h3>\n                <div className=\"space-y-3 text-muted-foreground leading-relaxed\">\n                  <p data-testid=\"text-reporting-description-1\">\n                    Real-time dashboards with infinite drill-down capabilities. Every interaction, every touchpoint, every conversion tracked and visualized with institutional-grade precision.\n                  </p>\n                  <p data-testid=\"text-reporting-description-2\">\n                    From 30,000-foot pipeline overviews to granular activity tracking—click any metric to expose the underlying data streams, attribution models, and performance indicators.\n                  </p>\n                  <p className=\"font-medium text-foreground\" data-testid=\"text-reporting-conclusion\">\n                    <span style={{ color: 'hsl(25 95% 53%)' }}>Complete transparency.</span> Every dollar tracked. Every decision data-driven.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"relative\">\n            {/* Modern Analytics Dashboard */}\n            <Card className=\"p-6 bg-slate-900 border-slate-700\">\n              <AnimatePresence mode=\"wait\">\n                {/* Executive Overview */}\n                {currentView === \"overview\" && (\n                  <motion.div\n                    key=\"overview\"\n                    initial={{ opacity: 0, scale: 0.95 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    exit={{ opacity: 0, scale: 1.05 }}\n                  >\n                    <div className=\"h-8 flex items-center mb-4\">\n                      <h3 className=\"text-lg font-semibold text-white\">Executive Overview</h3>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-3\">\n                      <motion.div \n                        className=\"bg-slate-800 border border-slate-700 rounded-lg p-4 hover-elevate\"\n                        initial={{ opacity: 0, y: 20 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        transition={{ delay: 0.1 }}\n                      >\n                        <div className=\"text-xs text-gray-400 mb-1\">Total Pipeline</div>\n                        <div className=\"text-2xl font-bold text-white\">$12.4M</div>\n                        <div className=\"text-xs\" style={{ color: 'hsl(25 95% 53%)' }}>↑ 12.4%</div>\n                      </motion.div>\n                      <motion.div \n                        className=\"bg-slate-800 border border-slate-700 rounded-lg p-4 hover-elevate\"\n                        initial={{ opacity: 0, y: 20 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        transition={{ delay: 0.15 }}\n                      >\n                        <div className=\"text-xs text-gray-400 mb-1\">Avg Deal Size</div>\n                        <div className=\"text-2xl font-bold text-white\">$284K</div>\n                        <div className=\"text-xs\" style={{ color: 'hsl(25 95% 53%)' }}>↑ 8.3%</div>\n                      </motion.div>\n                      <motion.div \n                        className=\"bg-slate-800 border border-slate-700 rounded-lg p-4 hover-elevate\"\n                        initial={{ opacity: 0, y: 20 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        transition={{ delay: 0.2 }}\n                      >\n                        <div className=\"text-xs text-gray-400 mb-1\">Win Rate</div>\n                        <div className=\"text-2xl font-bold text-white\">42.8%</div>\n                        <div className=\"text-xs\" style={{ color: 'hsl(25 95% 53%)' }}>↑ 4.2%</div>\n                      </motion.div>\n                      <motion.div \n                        className=\"bg-slate-800 border border-slate-700 rounded-lg p-4 hover-elevate\"\n                        initial={{ opacity: 0, y: 20 }}\n                        animate={{ opacity: 1, y: 0 }}\n                        transition={{ delay: 0.25 }}\n                      >\n                        <div className=\"text-xs text-gray-400 mb-1\">Avg Sales Cycle</div>\n                        <div className=\"text-2xl font-bold text-white\">38 days</div>\n                        <div className=\"text-xs\" style={{ color: 'hsl(25 95% 53%)' }}>↓ 8 days</div>\n                      </motion.div>\n                    </div>\n                    \n                    {/* Pipeline Funnel & Key Metrics */}\n                    <div className=\"grid grid-cols-2 gap-3 mt-4\">\n                      {/* Funnel Chart */}\n                      <div className=\"bg-slate-800 border border-slate-700 rounded-lg p-4\">\n                        <div className=\"text-sm font-medium text-white mb-4\">Pipeline by Stage</div>\n                        <div className=\"space-y-2\">\n                          {[\n                            { stage: \"Discovery\", value: \"$3.8M\", width: 100, color: \"bg-blue-500\" },\n                            { stage: \"Qualification\", value: \"$3.4M\", width: 85, color: \"bg-purple-500\" },\n                            { stage: \"Proposal\", value: \"$2.9M\", width: 70, color: \"bg-indigo-500\" },\n                            { stage: \"Negotiation\", value: \"$2.3M\", width: 55, color: \"bg-green-500\" }\n                          ].map((item, i) => (\n                            <div key={i} className=\"flex flex-col items-center\">\n                              <motion.div\n                                className={`${item.color} rounded h-10 flex items-center justify-center`}\n                                style={{ width: `${item.width}%` }}\n                                initial={{ width: 0 }}\n                                animate={{ width: `${item.width}%` }}\n                                transition={{ delay: i * 0.15, duration: 0.6 }}\n                              >\n                                <span className=\"text-white text-xs font-medium\">{item.stage}</span>\n                              </motion.div>\n                              <span className=\"text-xs text-gray-400 mt-1\">{item.value}</span>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* Top Opportunities */}\n                      <div className=\"bg-slate-800 border border-slate-700 rounded-lg p-4\">\n                        <div className=\"text-sm font-medium text-white mb-4\">Top Opportunities</div>\n                        <div className=\"space-y-3\">\n                          {[\n                            { company: \"Acme Corp\", value: \"$450K\", stage: \"Negotiation\" },\n                            { company: \"TechStart\", value: \"$380K\", stage: \"Proposal\" },\n                            { company: \"SecureNet\", value: \"$295K\", stage: \"Qualification\" }\n                          ].map((item, i) => (\n                            <motion.div\n                              key={i}\n                              className=\"flex justify-between items-center\"\n                              initial={{ opacity: 0, x: 20 }}\n                              animate={{ opacity: 1, x: 0 }}\n                              transition={{ delay: i * 0.1 }}\n                            >\n                              <div>\n                                <div className=\"text-sm text-white font-medium\">{item.company}</div>\n                                <div className=\"text-xs text-gray-400\">{item.stage}</div>\n                              </div>\n                              <div className=\"text-sm font-bold text-white\">{item.value}</div>\n                            </motion.div>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </motion.div>\n                )}\n\n                {/* Lead Disposition */}\n                {currentView === \"disposition\" && (\n                  <motion.div\n                    key=\"disposition\"\n                    initial={{ opacity: 0, x: 20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    exit={{ opacity: 0, x: -20 }}\n                  >\n                    <div className=\"h-8 flex items-center mb-4\">\n                      <h3 className=\"text-lg font-semibold text-white\">Lead Disposition</h3>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-3\">\n                      {[\n                        { status: \"Qualified\", percentage: \"48.2%\", count: \"1,372\", color: \"bg-green-500\" },\n                        { status: \"Nurturing\", percentage: \"32.4%\", count: \"922\", color: \"bg-blue-500\" },\n                        { status: \"Disqualified\", percentage: \"14.8%\", count: \"421\", color: \"bg-red-500\" },\n                        { status: \"Unresponsive\", percentage: \"4.6%\", count: \"131\", color: \"bg-gray-500\" }\n                      ].map((item, i) => (\n                        <motion.div\n                          key={i}\n                          className=\"bg-slate-800 border border-slate-700 rounded-lg p-4 hover-elevate\"\n                          initial={{ opacity: 0, scale: 0.9 }}\n                          animate={{ opacity: 1, scale: 1 }}\n                          transition={{ delay: i * 0.1 }}\n                        >\n                          <div className=\"text-xs text-gray-400 mb-1\">{item.status}</div>\n                          <div className=\"text-2xl font-bold text-white\">{item.percentage}</div>\n                          <div className=\"text-xs text-gray-400\">{item.count} leads</div>\n                        </motion.div>\n                      ))}\n                    </div>\n                    \n                    {/* Pie Chart & Lead Quality */}\n                    <div className=\"grid grid-cols-2 gap-3 mt-4\">\n                      {/* Pie Chart */}\n                      <div className=\"bg-slate-800 border border-slate-700 rounded-lg p-4\">\n                        <div className=\"text-sm font-medium text-white mb-4\">Lead Status Distribution</div>\n                        <div className=\"flex items-center justify-center\">\n                          <div className=\"relative w-32 h-32\">\n                            {/* Simple pie chart representation using conic gradient */}\n                            <motion.div\n                              className=\"w-full h-full rounded-full\"\n                              style={{\n                                background: `conic-gradient(\n                                  #22c55e 0% 48%,\n                                  #3b82f6 48% 80%,\n                                  #ef4444 80% 95%,\n                                  #6b7280 95% 100%\n                                )`\n                              }}\n                              initial={{ opacity: 0, scale: 0.8 }}\n                              animate={{ opacity: 1, scale: 1 }}\n                              transition={{ duration: 0.6 }}\n                            />\n                          </div>\n                        </div>\n                        <div className=\"grid grid-cols-2 gap-2 mt-4\">\n                          {[\n                            { label: \"Qualified\", value: \"48%\", color: \"bg-green-500\" },\n                            { label: \"Nurturing\", value: \"32%\", color: \"bg-blue-500\" },\n                            { label: \"Disqualified\", value: \"15%\", color: \"bg-red-500\" },\n                            { label: \"Unresponsive\", value: \"5%\", color: \"bg-gray-500\" }\n                          ].map((item, i) => (\n                            <div key={i} className=\"flex items-center gap-1.5\">\n                              <div className={`w-2 h-2 ${item.color} rounded-full`} />\n                              <span className=\"text-xs text-gray-400\">{item.label}</span>\n                              <span className=\"text-xs text-white font-medium\">{item.value}</span>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n\n                      {/* Lead Quality Metrics */}\n                      <div className=\"bg-slate-800 border border-slate-700 rounded-lg p-4\">\n                        <div className=\"text-sm font-medium text-white mb-4\">Lead Quality Score</div>\n                        <div className=\"space-y-3\">\n                          {[\n                            { metric: \"ICP Match\", score: 94, color: \"text-green-500\" },\n                            { metric: \"Engagement\", score: 87, color: \"text-blue-500\" },\n                            { metric: \"Intent Signals\", score: 82, color: \"text-purple-500\" },\n                            { metric: \"Budget Fit\", score: 78, color: \"text-indigo-500\" }\n                          ].map((item, i) => (\n                            <motion.div\n                              key={i}\n                              initial={{ opacity: 0, x: 20 }}\n                              animate={{ opacity: 1, x: 0 }}\n                              transition={{ delay: i * 0.1 }}\n                            >\n                              <div className=\"flex justify-between items-center mb-1\">\n                                <span className=\"text-xs text-gray-400\">{item.metric}</span>\n                                <span className={`text-sm font-bold ${item.color}`}>{item.score}</span>\n                              </div>\n                              <div className=\"bg-slate-700 h-1.5 rounded-full overflow-hidden\">\n                                <motion.div\n                                  className=\"h-full bg-gradient-to-r from-blue-500 to-green-500 rounded-full\"\n                                  initial={{ width: \"0%\" }}\n                                  animate={{ width: `${item.score}%` }}\n                                  transition={{ delay: 0.3 + i * 0.1, duration: 0.6 }}\n                                />\n                              </div>\n                            </motion.div>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </motion.div>\n                )}\n\n                {/* Pipeline Health */}\n                {currentView === \"pipeline\" && (\n                  <motion.div\n                    key=\"pipeline\"\n                    initial={{ opacity: 0, x: 20 }}\n                    animate={{ opacity: 1, x: 0 }}\n                    exit={{ opacity: 0, x: -20 }}\n                  >\n                    <div className=\"h-8 flex items-center mb-4\">\n                      <h3 className=\"text-lg font-semibold text-white\">Pipeline Health</h3>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-3\">\n                      {[\n                        { metric: \"Response Time\", value: \"< 2 hrs\", status: \"Excellent\", color: \"bg-green-500\" },\n                        { metric: \"Stage Velocity\", value: \"6.8 days\", status: \"Excellent\", color: \"bg-green-500\" },\n                        { metric: \"Data Complete\", value: \"96%\", status: \"Strong\", color: \"bg-green-500\" },\n                        { metric: \"Stale Leads\", value: \"8%\", status: \"Good\", color: \"bg-green-500\" }\n                      ].map((item, i) => (\n                        <motion.div\n                          key={i}\n                          className=\"bg-slate-800 border border-slate-700 rounded-lg p-4 hover-elevate\"\n                          initial={{ opacity: 0, y: 20 }}\n                          animate={{ opacity: 1, y: 0 }}\n                          transition={{ delay: i * 0.1 }}\n                        >\n                          <div className=\"text-xs text-gray-400 mb-1\">{item.metric}</div>\n                          <div className=\"text-2xl font-bold text-white mb-1\">{item.value}</div>\n                          <div className=\"flex items-center gap-1.5\">\n                            <div className={`w-1.5 h-1.5 ${item.color} rounded-full`} />\n                            <span className=\"text-xs text-gray-400\">{item.status}</span>\n                          </div>\n                        </motion.div>\n                      ))}\n                    </div>\n                    \n                    {/* Conversion Rates */}\n                    <div className=\"bg-slate-800 border border-slate-700 rounded-lg p-4 mt-4\">\n                      <div className=\"text-sm font-medium text-white mb-3\">Stage Conversion Rates</div>\n                      <div className=\"space-y-2.5\">\n                        {[\n                          { from: \"Lead → Qualified\", rate: 72, color: \"bg-blue-500\" },\n                          { from: \"Qualified → Proposal\", rate: 58, color: \"bg-purple-500\" },\n                          { from: \"Proposal → Negotiation\", rate: 68, color: \"bg-indigo-500\" },\n                          { from: \"Negotiation → Close\", rate: 54, color: \"bg-green-500\" }\n                        ].map((item, i) => (\n                          <div key={i} className=\"space-y-1\">\n                            <div className=\"flex justify-between text-sm\">\n                              <span className=\"text-gray-400\">{item.from}</span>\n                              <span className=\"text-white font-medium\">{item.rate}%</span>\n                            </div>\n                            <div className=\"bg-slate-700 h-2 rounded-full\">\n                              <motion.div\n                                className={`${item.color} h-full rounded-full`}\n                                initial={{ width: \"0%\" }}\n                                animate={{ width: `${item.rate}%` }}\n                                transition={{ delay: 0.2 + i * 0.1, duration: 0.8 }}\n                              />\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </motion.div>\n                )}\n\n                {/* Performance Summary */}\n                {currentView === \"performance\" && (\n                  <motion.div\n                    key=\"performance\"\n                    initial={{ opacity: 0, scale: 0.95 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    exit={{ opacity: 0, scale: 1.05 }}\n                  >\n                    <div className=\"h-8 flex items-center mb-4\">\n                      <h3 className=\"text-lg font-semibold text-white\">Performance Summary</h3>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-3\">\n                      {[\n                        { label: \"Monthly Quota\", value: \"$3.2M\", color: \"bg-blue-500\" },\n                        { label: \"Forecast\", value: \"$3.4M\", color: \"bg-green-500\" },\n                        { label: \"Booked Revenue\", value: \"$2.8M\", color: \"bg-purple-500\" },\n                        { label: \"At Risk\", value: \"$280K\", color: \"bg-yellow-500\" }\n                      ].map((metric, i) => (\n                        <motion.div\n                          key={i}\n                          className=\"bg-slate-800 border border-slate-700 rounded-lg p-4 hover-elevate\"\n                          initial={{ opacity: 0, y: 20 }}\n                          animate={{ opacity: 1, y: 0 }}\n                          transition={{ delay: i * 0.1 }}\n                        >\n                          <div className=\"text-xs text-gray-400 mb-1\">{metric.label}</div>\n                          <div className=\"text-2xl font-bold text-white\">{metric.value}</div>\n                          <div className=\"text-xs text-gray-400\">Target</div>\n                        </motion.div>\n                      ))}\n                    </div>\n                    \n                    {/* Team Performance */}\n                    <div className=\"bg-slate-800 border border-slate-700 rounded-lg p-4 mt-4\">\n                      <div className=\"text-sm font-medium text-white mb-3\">Team Performance vs Targets</div>\n                      <div className=\"space-y-2.5\">\n                        {[\n                          { team: \"Enterprise Sales\", achievement: 106, target: \"$3.2M\", color: \"bg-green-500\" },\n                          { team: \"Mid-Market\", achievement: 98, target: \"$1.8M\", color: \"bg-green-500\" },\n                          { team: \"SMB\", achievement: 92, target: \"$950K\", color: \"bg-blue-500\" },\n                          { team: \"Channel Partners\", achievement: 88, target: \"$720K\", color: \"bg-blue-500\" }\n                        ].map((item, i) => (\n                          <div key={i} className=\"space-y-1\">\n                            <div className=\"flex justify-between text-sm\">\n                              <span className=\"text-gray-400\">{item.team}</span>\n                              <span className=\"text-white font-medium\">{item.achievement}% ({item.target})</span>\n                            </div>\n                            <div className=\"bg-slate-700 h-2 rounded-full\">\n                              <motion.div\n                                className={`${item.color} h-full rounded-full`}\n                                initial={{ width: \"0%\" }}\n                                animate={{ width: `${Math.min(item.achievement, 100)}%` }}\n                                transition={{ delay: 0.2 + i * 0.1, duration: 0.8 }}\n                              />\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":23423},"client/src/components/ProcessAnimation.tsx":{"content":"import { motion, AnimatePresence, useAnimate } from \"framer-motion\";\nimport { useState, useEffect } from \"react\";\nimport { Phone, Users, Calendar, Building2, DollarSign, Mic, MousePointerClick, PartyPopper } from \"lucide-react\";\n\nexport default function ProcessAnimation() {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [stageText, setStageText] = useState(\"Qualified Lead\");\n  const [dateLabel, setDateLabel] = useState(\"Meeting Date:\");\n  const [dateValue, setDateValue] = useState(\"Oct 15, 2025\");\n  const totalSteps = 5;\n\n  \n  // Keep these constants for other slides (not slide 4)\n  const GREEN_START = 3.2;\n  const GREEN_DURATION = 0.3;\n  const GREEN_EASING = \"easeOut\";\n  const BOUNCE_S = 2.5;\n  \n  // Live Call timing constants\n  const SARAH_INDEX = 1;\n  const DIAL_ROW_DELAY = 0.3; // Must match list item delay\n  const SARAH_BG_DURATION = 2.0; // Must match Sarah's row duration\n  const LIVE_CALL_DELAY = SARAH_INDEX * DIAL_ROW_DELAY + SARAH_BG_DURATION; // 2.8s - exactly when Sarah turns green\n  \n  // Proper duration for each step to allow animations to complete\n  const stepDurations = [3500, 3800, 3500, 4500, 6000]; // [AI Dialer, Conversation, Calendar, Meeting→CRM→ClosedWon, Sales Chart]\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setCurrentStep((prev) => (prev + 1) % totalSteps);\n    }, stepDurations[currentStep]);\n\n    return () => clearTimeout(timeout);\n  }, [currentStep]);\n\n  // Simple slide 4 state management\n  useEffect(() => {\n    if (currentStep === 3) {\n      // Reset to initial state\n      setStageText(\"Qualified Lead\");\n      setDateLabel(\"Meeting Date:\");\n      setDateValue(\"Oct 15, 2025\");\n      \n      // Simple timing for state changes\n      const dateTimeout = setTimeout(() => {\n        setDateLabel(\"Close Date:\");\n        setDateValue(\"Nov 15, 2025\");\n      }, 1000);\n      \n      const stageTimeout = setTimeout(() => {\n        setStageText(\"Closed Won\");\n      }, 3000);\n      \n      return () => {\n        clearTimeout(dateTimeout);\n        clearTimeout(stageTimeout);\n        setStageText(\"Qualified Lead\");\n      };\n    }\n  }, [currentStep]);\n\n\n  return (\n    <div className=\"relative w-full max-w-5xl mx-auto h-[500px] overflow-hidden\" data-testid=\"process-animation\">\n      <AnimatePresence mode=\"wait\">\n        <motion.div\n          key={currentStep}\n          className=\"absolute inset-0 flex items-center justify-center\"\n          initial={{ opacity: 0, x: 30 }}\n          animate={{ opacity: 1, x: 0 }}\n          exit={{ opacity: 0, x: -30 }}\n          transition={{ duration: 0.4, ease: \"easeInOut\" }}\n        >\n          \n          {/* Step 1: Multiple AI Calls */}\n          {currentStep === 0 && (\n            <div className=\"relative w-full h-full flex items-center justify-center\">\n              <div className=\"text-center\">\n                {/* Multiple Phone Calls with AI hub */}\n                <div className=\"relative flex items-center justify-center\">\n                  {/* Prospect List */}\n                  <div className=\"relative mr-12\">\n                    <div className=\"bg-white dark:bg-gray-900 border-2 border-gray-200 dark:border-gray-700 rounded-lg p-4 w-60\">\n                      <div className=\"space-y-2\">\n                        {[\n                          { name: \"John Smith\", title: \"CISO, TechCorp\", state: \"dialing\" },\n                          { name: \"Sarah Johnson\", title: \"Security Director\", state: \"connected\" },\n                          { name: \"Mike Wilson\", title: \"IT Manager\", state: \"dialing\" },\n                          { name: \"Lisa Chen\", title: \"VP Security\", state: \"dialing\" }\n                        ].map((prospect, index) => (\n                          <motion.div\n                            key={index}\n                            className=\"relative\"\n                            data-testid={`prospect-card-${index}`}\n                          >\n                            {/* Connection line to AI hub */}\n                            <motion.div\n                              className=\"absolute right-full top-1/2 w-8 h-0.5\"\n                              style={{\n                                background: 'hsl(220 10% 70%)',\n                                transformOrigin: 'left center'\n                              }}\n                              initial={{ scaleX: 0 }}\n                              animate={{\n                                scaleX: 1,\n                                background: index === 1 ? [\n                                  'hsl(220 10% 70%)',\n                                  'hsl(220 10% 70%)',\n                                  'hsl(142 71% 60%)'\n                                ] : 'hsl(220 10% 70%)'\n                              }}\n                              transition={{\n                                scaleX: { delay: 0.5 + index * 0.2, duration: 0.4 },\n                                background: { delay: index === 1 ? LIVE_CALL_DELAY : 0, duration: 0.4 }\n                              }}\n                            >\n                              {/* Pulse indicator */}\n                              <motion.div\n                                className=\"absolute -right-1 -top-1 w-2 h-2 rounded-full\"\n                                animate={{\n                                  backgroundColor: index === 1 ? [\n                                    'hsl(25 95% 60%)',\n                                    'hsl(25 95% 60%)',\n                                    'hsl(142 71% 60%)'\n                                  ] : 'hsl(25 95% 60%)',\n                                  scale: [1, 1.4, 1],\n                                  opacity: [0.6, 1, 0.6]\n                                }}\n                                transition={{\n                                  backgroundColor: { delay: index === 1 ? LIVE_CALL_DELAY : 0, duration: 0.4 },\n                                  scale: { duration: 1.8, repeat: Infinity, delay: index * 0.3 },\n                                  opacity: { duration: 1.8, repeat: Infinity, delay: index * 0.3 }\n                                }}\n                              />\n                            </motion.div>\n                            \n                            <motion.div\n                              className=\"flex items-center justify-between p-2 rounded-lg transition-all duration-500\"\n                              style={{\n                                backgroundColor: 'hsl(220 10% 98%)',\n                                borderLeft: '3px solid transparent'\n                              }}\n                              animate={{\n                                opacity: 1,\n                                x: 0,\n                                backgroundColor: index === 1 ? [\n                                  'hsl(220 10% 98%)',\n                                  'hsl(220 10% 98%)', \n                                  'hsl(142 71% 95%)'\n                                ] : 'hsl(220 10% 98%)',\n                                borderLeftColor: index === 1 ? [\n                                  'hsl(220 10% 95%)',\n                                  'hsl(220 10% 95%)',\n                                  'hsl(142 71% 60%)'\n                                ] : 'hsl(220 10% 95%)'\n                              }}\n                              transition={{\n                                opacity: { delay: index * 0.1 + 0.3, duration: 0.4 },\n                                x: { delay: index * 0.1 + 0.3, duration: 0.4 },\n                                backgroundColor: { delay: index === 1 ? LIVE_CALL_DELAY : 0, duration: 0.4 },\n                                borderLeftColor: { delay: index === 1 ? GREEN_START : 0, duration: GREEN_DURATION, ease: GREEN_EASING }\n                              }}\n                              initial={{ opacity: 0, x: -10 }}\n                            >\n                              <div className=\"flex items-center space-x-2\">\n                                <motion.div\n                                  className=\"w-6 h-6 rounded-full border-2 flex items-center justify-center\"\n                                  style={{\n                                    borderColor: 'hsl(220 10% 70%)',\n                                    backgroundColor: 'hsl(220 10% 95%)'\n                                  }}\n                                  animate={{\n                                    borderColor: index === 1 ? [\n                                      'hsl(220 10% 70%)',\n                                      'hsl(220 10% 70%)',\n                                      'hsl(142 71% 70%)'\n                                    ] : 'hsl(220 10% 70%)',\n                                    backgroundColor: index === 1 ? [\n                                      'hsl(220 10% 95%)',\n                                      'hsl(220 10% 95%)',\n                                      'hsl(142 71% 90%)'\n                                    ] : 'hsl(220 10% 95%)'\n                                  }}\n                                  transition={{\n                                    borderColor: { delay: index === 1 ? LIVE_CALL_DELAY : 0, duration: 0.4 },\n                                    backgroundColor: { delay: index === 1 ? LIVE_CALL_DELAY : 0, duration: 0.4 }\n                                  }}\n                                >\n                                  <motion.div\n                                    animate={{\n                                      color: index === 1 ? [\n                                        'hsl(220 10% 50%)',\n                                        'hsl(220 10% 50%)',\n                                        'hsl(142 71% 50%)'\n                                      ] : 'hsl(220 10% 50%)'\n                                    }}\n                                    transition={{ delay: index === 1 ? LIVE_CALL_DELAY : 0, duration: 0.4 }}\n                                  >\n                                    <Users className=\"w-3 h-3\" />\n                                  </motion.div>\n                                </motion.div>\n                                \n                                <div className=\"text-xs\">\n                                  <div className=\"font-medium text-gray-800 dark:text-gray-200\">\n                                    {prospect.name}\n                                  </div>\n                                  <div className=\"text-gray-500 dark:text-gray-400\">\n                                    {prospect.title}\n                                  </div>\n                                </div>\n                              </div>\n                              \n                              {/* Connected indicator */}\n                              {index === 1 && (\n                                <motion.div\n                                  className=\"flex items-center space-x-1 bg-green-50 dark:bg-green-900/30 px-1.5 py-0.5 rounded-full\"\n                                  initial={{ opacity: 0, scale: 0.8 }}\n                                  animate={{ opacity: 1, scale: 1 }}\n                                  transition={{ delay: LIVE_CALL_DELAY, duration: 0.3, ease: \"backOut\" }}\n                                  data-testid=\"connected-indicator\"\n                                >\n                                  {/* Live waveform */}\n                                  <div className=\"flex items-center space-x-0.5\">\n                                    {[...Array(3)].map((_, i) => (\n                                      <motion.div\n                                        key={i}\n                                        className=\"w-0.5 bg-green-600 dark:bg-green-400 rounded-full\"\n                                        style={{ height: '6px' }}\n                                        animate={{\n                                          scaleY: [1, 2, 0.5, 1.5, 1],\n                                          opacity: [0.6, 1, 0.7, 1, 0.6]\n                                        }}\n                                        transition={{\n                                          duration: 1,\n                                          repeat: Infinity,\n                                          delay: i * 0.1\n                                        }}\n                                      />\n                                    ))}\n                                  </div>\n                                  <span className=\"text-xs font-medium text-green-600 dark:text-green-400\">Live</span>\n                                </motion.div>\n                              )}\n                            </motion.div>\n                          </motion.div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* AI Dialer Center */}\n                  <motion.div\n                    className=\"relative\"\n                    initial={{ scale: 0 }}\n                    animate={{ scale: 1 }}\n                    transition={{ delay: 0.3, type: \"spring\", stiffness: 200 }}\n                  >\n                    <div className=\"bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-xl p-6 w-40 shadow-lg\">\n                      <div className=\"text-center\">\n                        <motion.div \n                          className=\"w-28 h-16 mx-auto rounded-2xl flex items-center justify-center mb-6 relative overflow-hidden\" \n                          style={{ \n                            background: 'linear-gradient(135deg, hsl(220 100% 50%) 0%, hsl(260 100% 60%) 100%)', \n                            color: 'white'\n                          }}\n                          animate={{ \n                            boxShadow: [\n                              '0 0 0 0 hsla(25, 95%, 53%, 0.3)',\n                              '0 0 0 20px hsla(25, 95%, 53%, 0)',\n                              '0 0 0 0 hsla(25, 95%, 53%, 0)'\n                            ]\n                          }}\n                          transition={{ duration: 3, repeat: Infinity, ease: \"easeOut\" }}\n                        >\n                          {/* Neural network pattern background */}\n                          <motion.div \n                            className=\"absolute inset-0 opacity-20\"\n                            animate={{ \n                              backgroundPosition: ['0% 0%', '100% 100%'],\n                            }}\n                            transition={{ duration: 4, repeat: Infinity, ease: \"linear\" }}\n                            style={{\n                              backgroundImage: `radial-gradient(circle at 20% 20%, rgba(255,255,255,0.3) 1px, transparent 1px),\n                                              radial-gradient(circle at 80% 80%, rgba(255,255,255,0.3) 1px, transparent 1px),\n                                              radial-gradient(circle at 40% 70%, rgba(255,255,255,0.2) 1px, transparent 1px)`,\n                              backgroundSize: '20px 20px, 25px 25px, 15px 15px'\n                            }}\n                          />\n                          \n                          {/* Central AI Circle - properly centered */}\n                          <motion.div \n                            className=\"w-12 h-12 rounded-full flex items-center justify-center shadow-lg z-10\"\n                            style={{ background: 'linear-gradient(to bottom right, hsl(25 95% 53%), hsl(30 85% 45%))' }}\n                            animate={{\n                              scale: [1, 1.05, 1],\n                              filter: [\n                                'drop-shadow(0 0 5px rgba(255,255,255,0.5))',\n                                'drop-shadow(0 0 15px rgba(255,255,255,0.8))',\n                                'drop-shadow(0 0 5px rgba(255,255,255,0.5))'\n                              ]\n                            }}\n                            transition={{ duration: 2, repeat: Infinity }}\n                            data-testid=\"ai-hub\"\n                          >\n                            <span className=\"font-bold text-lg text-white tracking-wider\">AI</span>\n                          </motion.div>\n                          \n                          {/* Animated data streams */}\n                          <motion.div \n                            className=\"absolute top-2 right-2 w-1 h-1 rounded-full bg-cyan-300\"\n                            animate={{ \n                              scale: [0, 1.5, 0],\n                              opacity: [0, 1, 0]\n                            }}\n                            transition={{ duration: 1.5, repeat: Infinity, delay: 0 }}\n                          />\n                          <motion.div \n                            className=\"absolute bottom-2 left-2 w-1 h-1 rounded-full bg-green-300\"\n                            animate={{ \n                              scale: [0, 1.2, 0],\n                              opacity: [0, 1, 0]\n                            }}\n                            transition={{ duration: 1.8, repeat: Infinity, delay: 0.6 }}\n                          />\n                          <motion.div \n                            className=\"absolute top-3 left-3 w-0.5 h-0.5 rounded-full bg-yellow-300\"\n                            animate={{ \n                              scale: [0, 1.8, 0],\n                              opacity: [0, 1, 0]\n                            }}\n                            transition={{ duration: 2.2, repeat: Infinity, delay: 1.2 }}\n                          />\n                        </motion.div>\n                        {/* Active call counter that transitions */}\n                        <motion.div\n                          className=\"relative h-5\"\n                          initial={{ opacity: 0 }}\n                          animate={{ opacity: 1 }}\n                          transition={{ delay: 0.8 }}\n                        >\n                          {/* Connecting text */}\n                          <motion.div\n                            className=\"absolute inset-0 flex items-center justify-center\"\n                            initial={{ opacity: 1 }}\n                            animate={{ opacity: [0.7, 1, 0.7, 1, 0] }}\n                            transition={{ duration: LIVE_CALL_DELAY, times: [0, 0.2, 0.5, 0.7, 1] }}\n                          >\n                            <div className=\"bg-blue-50 dark:bg-blue-900/30 px-2 py-1 rounded-full flex items-center space-x-1.5\">\n                              <motion.div\n                                className=\"w-2 h-2 rounded-full\"\n                                style={{ backgroundColor: 'hsl(220 100% 60%)' }}\n                                animate={{ opacity: [0.6, 1, 0.6] }}\n                                transition={{ duration: 1.5, repeat: Infinity }}\n                              />\n                              <span className=\"text-xs font-medium text-blue-600 dark:text-blue-400\">connecting...</span>\n                            </div>\n                          </motion.div>\n                          \n                          {/* \"Live Call\" text with green dot */}\n                          <motion.div\n                            className=\"absolute inset-0 flex items-center justify-center\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            transition={{ delay: LIVE_CALL_DELAY, duration: GREEN_DURATION, ease: GREEN_EASING }}\n                          >\n                            <div className=\"bg-green-50 dark:bg-green-900/30 px-2 py-1 rounded-full flex items-center space-x-1.5\">\n                              <motion.div\n                                className=\"w-2 h-2 rounded-full\"\n                                style={{ backgroundColor: 'hsl(142 71% 45%)' }}\n                                animate={{ opacity: [0.6, 1, 0.6] }}\n                                transition={{ duration: 2, repeat: Infinity }}\n                              />\n                              <span className=\"text-xs font-medium text-green-600 dark:text-green-400\">Live Call</span>\n                            </div>\n                          </motion.div>\n                        </motion.div>\n                      </div>\n                    </div>\n                  </motion.div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Step 2: Live Conversation */}\n          {currentStep === 1 && (\n            <div className=\"relative w-full h-full flex items-center justify-center\">\n              {/* Clean conversation bubbles - no box */}\n              <div className=\"space-y-3\">\n                {/* Live call indicator */}\n                <motion.div\n                  className=\"flex items-center justify-center mb-4\"\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ delay: 0.1 }}\n                >\n                  <span className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Live Call</span>\n                  <motion.div\n                    className=\"w-1.5 h-1.5 rounded-full ml-2\"\n                    style={{ backgroundColor: 'hsl(142 71% 45%)' }}\n                    animate={{ opacity: [0.3, 1, 0.3] }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  />\n                </motion.div>\n\n                {/* Sales rep message */}\n                <motion.div\n                  className=\"flex justify-end\"\n                  initial={{ opacity: 0, x: 20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  transition={{ delay: 0.4, duration: 0.5 }}\n                >\n                  <div className=\"max-w-xs px-3 py-2 rounded-lg text-sm bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700\" style={{ backgroundColor: 'hsl(142 71% 95%)', color: 'hsl(142 71% 25%)' }}>\n                    Hi Sarah! We help cybersecurity companies scale. How's sales going?\n                  </div>\n                </motion.div>\n\n                {/* Prospect message */}\n                <motion.div\n                  className=\"flex justify-start\"\n                  initial={{ opacity: 0, x: -20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  transition={{ delay: 1.0, duration: 0.4 }}\n                >\n                  <div className=\"max-w-xs px-3 py-2 rounded-lg text-sm bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700\" style={{ backgroundColor: 'hsl(220 100% 95%)', color: 'hsl(220 100% 25%)' }}>\n                    Struggling to reach CISOs and security directors.\n                  </div>\n                </motion.div>\n\n                {/* Sales rep response */}\n                <motion.div\n                  className=\"flex justify-end\"\n                  initial={{ opacity: 0, x: 20 }}\n                  animate={{ opacity: 1, x: 0 }}\n                  transition={{ delay: 1.8, duration: 0.4 }}\n                >\n                  <div className=\"max-w-xs px-3 py-2 rounded-lg text-sm bg-white dark:bg-gray-900 border border-gray-200 dark:border-gray-700\" style={{ backgroundColor: 'hsl(142 71% 95%)', color: 'hsl(142 71% 25%)' }}>\n                    We 3x demo bookings. Quick demo next week?\n                  </div>\n                </motion.div>\n              </div>\n            </div>\n          )}\n\n          {/* Step 3: Calendar Booking */}\n          {currentStep === 2 && (\n            <div className=\"relative w-full h-full flex items-center justify-center\">\n\n              <motion.div\n                className=\"relative\"\n                initial={{ scale: 0.8, opacity: 0 }}\n                animate={{ scale: 1, opacity: 1 }}\n                transition={{ delay: 0.3, duration: 0.6, ease: \"easeOut\" }}\n              >\n                {/* Calendar Interface - Blended Style */}\n                <div className=\"bg-white dark:bg-gray-900 border-2 border-gray-200 dark:border-gray-700 rounded-lg p-4 w-72\">\n                  \n                  {/* Simplified Calendar Header */}\n                  <motion.div \n                    className=\"text-center mb-3\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ delay: 0.3, duration: 0.4 }}\n                  >\n                    <h3 className=\"text-sm font-bold text-gray-600 dark:text-gray-300\">Calendar - Oct 15, 2025</h3>\n                  </motion.div>\n                  \n                  {/* Time Slots - Compact Layout */}\n                  <div className=\"space-y-2\">\n                    {/* 10am slot - Busy */}\n                    <motion.div\n                      className=\"flex items-center h-7\"\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      transition={{ delay: 0.4, duration: 0.4 }}\n                    >\n                      <div className=\"w-12 text-xs text-gray-500 dark:text-gray-400\">10am</div>\n                      <div className=\"flex-1 rounded text-white text-xs px-2 py-1 font-medium\" style={{ backgroundColor: 'hsl(142 71% 45%)' }}>\n                        Busy\n                      </div>\n                    </motion.div>\n\n                    {/* 11am slot - Busy */}\n                    <motion.div\n                      className=\"flex items-center h-7\"\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      transition={{ delay: 0.5, duration: 0.4 }}\n                    >\n                      <div className=\"w-12 text-xs text-gray-500 dark:text-gray-400\">11am</div>\n                      <div className=\"flex-1 rounded text-white text-xs px-2 py-1 font-medium\" style={{ backgroundColor: 'hsl(142 71% 45%)' }}>\n                        Busy\n                      </div>\n                    </motion.div>\n\n                    {/* 12pm slot - Available, then gets booked */}\n                    <motion.div\n                      className=\"flex items-center h-7\"\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      transition={{ delay: 0.6, duration: 0.4 }}\n                    >\n                      <div className=\"w-12 text-xs text-gray-500 dark:text-gray-400\">12pm</div>\n                      <motion.div\n                        className=\"flex-1 rounded text-white text-xs px-2 py-1 font-medium relative overflow-hidden\"\n                        initial={{ backgroundColor: 'hsl(0 0% 100% / 0)', border: '1px dashed #d1d5db' }}\n                        animate={{ backgroundColor: 'hsl(25 95% 53%)' }}\n                        transition={{ delay: 1.2, duration: 0.8, ease: \"easeOut\" }}\n                      >\n                        <motion.span\n                          initial={{ opacity: 0 }}\n                          animate={{ opacity: 1 }}\n                          transition={{ delay: 1.5, duration: 0.3 }}\n                        >\n                          Meeting Booked\n                        </motion.span>\n                      </motion.div>\n                    </motion.div>\n\n                    {/* 1pm slot - Available */}\n                    <motion.div\n                      className=\"flex items-center h-7\"\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      transition={{ delay: 0.7, duration: 0.4 }}\n                    >\n                      <div className=\"w-12 text-xs text-gray-500 dark:text-gray-400\">1pm</div>\n                      <div className=\"flex-1 border border-dashed border-gray-300 dark:border-gray-600 rounded h-full\"></div>\n                    </motion.div>\n\n                    {/* 2pm slot - Available */}\n                    <motion.div\n                      className=\"flex items-center h-7\"\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      transition={{ delay: 0.8, duration: 0.4 }}\n                    >\n                      <div className=\"w-12 text-xs text-gray-500 dark:text-gray-400\">2pm</div>\n                      <div className=\"flex-1 border border-dashed border-gray-300 dark:border-gray-600 rounded h-full\"></div>\n                    </motion.div>\n                  </div>\n\n                  {/* Simple meeting confirmation */}\n                  <motion.div\n                    className=\"mt-3 pt-3 border-t border-gray-100 dark:border-gray-700 text-xs text-center\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{ delay: 1.8, duration: 0.4 }}\n                  >\n                    <div className=\"text-gray-600 dark:text-gray-400\">\n                      <span style={{ color: 'hsl(142 71% 45%)' }}>✓</span> Initial Meeting - Oct 15, 12pm\n                    </div>\n                  </motion.div>\n                </div>\n\n                {/* Success badge */}\n                <motion.div\n                  className=\"absolute -top-3 -right-3 w-8 h-8 rounded-full flex items-center justify-center shadow-lg\"\n                  style={{ backgroundColor: 'hsl(142 71% 45%)' }}\n                  initial={{ scale: 0, opacity: 0, rotate: -180 }}\n                  animate={{ scale: 1, opacity: 1, rotate: 0 }}\n                  transition={{ delay: 2.2, type: \"spring\", stiffness: 400, damping: 15 }}\n                >\n                  <span className=\"text-white font-bold text-sm\">✓</span>\n                </motion.div>\n              </motion.div>\n            </div>\n          )}\n\n          {/* Step 4: Salesforce Opportunity Creation → Closed Won */}\n          {currentStep === 3 && (\n            <div className=\"relative w-full h-full flex items-center justify-center mb-16\">\n              \n              {/* Salesforce Opportunity Card */}\n              <motion.div\n                className=\"relative\"\n                initial={{ opacity: 0, scale: 0.9 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ delay: 0.2, duration: 0.4 }}\n              >\n                {/* CRM Opportunity Card */}\n                <motion.div\n                  className=\"bg-white dark:bg-gray-900 border-2 rounded-lg p-5 relative w-96\"\n                  initial={{ borderColor: 'hsl(25 95% 53%)' }}\n                  animate={{ \n                    borderColor: stageText === 'Closed Won' ? 'hsl(142 71% 45%)' : 'hsl(25 95% 53%)',\n                    boxShadow: stageText === 'Closed Won' \n                      ? [\n                          '0 0 0 0 hsl(142 71% 45% / 0.4)',\n                          '0 0 0 10px hsl(142 71% 45% / 0.1)', \n                          '0 0 20px 15px hsl(142 71% 45% / 0.05)',\n                          '0 0 0 0 hsl(142 71% 45% / 0)'\n                        ]\n                      : '0 4px 6px -1px rgb(0 0 0 / 0.1)',\n                    scale: stageText === 'Closed Won' ? [1, 1.02, 1] : 1,\n                    y: stageText === 'Closed Won' ? [0, -5, 0] : 0\n                  }}\n                  transition={{ \n                    borderColor: { duration: 0.3 },\n                    boxShadow: { duration: 1.5, delay: stageText === 'Closed Won' ? 0.1 : 0 },\n                    scale: { delay: 0, duration: 0.6, ease: \"easeOut\" },\n                    y: { delay: 0, duration: 0.6, ease: \"easeOut\" }\n                  }}\n                >\n                  {/* Simple Salesforce Opportunity Header */}\n                  <div className=\"text-center border-b pb-3 mb-4\">\n                    <h3 \n                      className=\"text-lg font-bold\"\n                      style={{ \n                        color: stageText === 'Closed Won' ? 'hsl(142 71% 45%)' : 'hsl(25 95% 53%)'\n                      }}\n                    >\n                      Sales Opportunity\n                    </h3>\n                  </div>\n\n                  {/* Opportunity Fields */}\n                  <div className=\"space-y-3 text-sm\">\n                    \n                    {/* Contact Field */}\n                    <motion.div\n                      className=\"flex justify-between items-center p-2 rounded\"\n                      style={{ \n                        backgroundColor: stageText === 'Closed Won' ? 'hsl(142 71% 95%)' : 'hsl(25 95% 95%)'\n                      }}\n                      initial={{ opacity: 0, y: 8 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ delay: 0.5, duration: 0.3 }}\n                    >\n                      <div className=\"flex items-center space-x-2\">\n                        <Users className=\"w-4 h-4 text-gray-600 dark:text-gray-400\" />\n                        <span className=\"text-gray-600 dark:text-gray-400\">Contact:</span>\n                      </div>\n                      <span className=\"font-medium\">Sarah Johnson</span>\n                    </motion.div>\n\n                    {/* Date Field */}\n                    <motion.div\n                      className=\"flex justify-between items-center p-2 rounded\"\n                      style={{ \n                        backgroundColor: stageText === 'Closed Won' ? 'hsl(142 71% 95%)' : 'hsl(25 95% 95%)'\n                      }}\n                      initial={{ opacity: 0, y: 8 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ delay: 0.7, duration: 0.3 }}\n                    >\n                      <span className=\"text-gray-600 dark:text-gray-400\">{dateLabel}</span>\n                      <span className=\"font-medium\">{dateValue}</span>\n                    </motion.div>\n\n                    {/* Value Field */}\n                    <motion.div\n                      className=\"flex justify-between items-center p-2 rounded\"\n                      style={{ \n                        backgroundColor: stageText === 'Closed Won' ? 'hsl(142 71% 95%)' : 'hsl(25 95% 95%)'\n                      }}\n                      initial={{ opacity: 0, y: 8 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      transition={{ delay: 0.9, duration: 0.3 }}\n                    >\n                      <div className=\"flex items-center space-x-2\">\n                        <DollarSign className=\"w-4 h-4 text-gray-600 dark:text-gray-400\" />\n                        <span className=\"text-gray-600 dark:text-gray-400\">Value:</span>\n                      </div>\n                      <span className=\"font-medium\">$50,000</span>\n                    </motion.div>\n\n                    {/* Stage Field - The key field that changes */}\n                    <motion.div\n                      className=\"flex justify-between items-center p-3 rounded cursor-pointer relative\"\n                      style={{ \n                        backgroundColor: stageText === 'Closed Won' ? 'hsl(142 71% 95%)' : 'hsl(25 95% 95%)'\n                      }}\n                      initial={{ opacity: 0, y: 8 }}\n                      animate={{ \n                        opacity: 1, \n                        y: 0\n                      }}\n                      transition={{ \n                        opacity: { delay: 1.1, duration: 0.3 },\n                        y: { delay: 1.1, duration: 0.3 }\n                      }}\n                    >\n                      <span className=\"text-gray-600 dark:text-gray-400\">Stage:</span>\n                      <span \n                        className={`font-medium ${stageText === 'Closed Won' ? 'font-bold' : ''}`}\n                        style={{ color: stageText === 'Closed Won' ? 'hsl(142 71% 45%)' : 'inherit' }}\n                      >\n                        {stageText}\n                      </span>\n\n\n                      {/* CRM Selection Indicator */}\n                      <AnimatePresence>\n                        {stageText === 'Qualified Lead' && (\n                          <motion.div\n                            className=\"absolute inset-0 border-2 border-blue-500 rounded-md pointer-events-none\"\n                            initial={{ opacity: 0 }}\n                            animate={{ \n                              opacity: [0, 0.6, 0.6, 0],\n                              scale: [1, 1.02, 1.02, 1]\n                            }}\n                            transition={{\n                              duration: 1.5,\n                              delay: 2.3,\n                              times: [0, 0.2, 0.8, 1]\n                            }}\n                            exit={{ opacity: 0 }}\n                          />\n                        )}\n                      </AnimatePresence>\n                    </motion.div>\n                  </div>\n\n                  {/* Celebration Particles */}\n                  <AnimatePresence>\n                    {stageText === 'Closed Won' && (\n                      <>\n                        {/* Success Message */}\n                        <motion.div\n                          className=\"absolute -top-16 left-1/2 transform -translate-x-1/2 bg-green-600 dark:bg-green-500 text-white dark:text-gray-900 px-4 py-2 rounded-lg font-bold text-sm whitespace-nowrap flex items-center space-x-2\"\n                          data-testid=\"text-deal-closed\"\n                          initial={{ opacity: 0, y: 10, scale: 0.8 }}\n                          animate={{ \n                            opacity: [0, 1, 1, 0],\n                            y: [10, -5, -5, -15],\n                            scale: [0.8, 1.1, 1, 0.9]\n                          }}\n                          transition={{ \n                            duration: 2.5,\n                            delay: 0.5,\n                            times: [0, 0.3, 0.8, 1]\n                          }}\n                          exit={{ opacity: 0, scale: 0.8 }}\n                        >\n                          <PartyPopper className=\"w-4 h-4\" />\n                          <span>Deal Closed! $50,000 Won</span>\n                        </motion.div>\n\n\n                      </>\n                    )}\n                  </AnimatePresence>\n\n                  {/* CRM Icon Badge */}\n                  <motion.div\n                    className=\"absolute -top-3 -right-3 w-12 h-12 rounded-lg flex items-center justify-center\"\n                    style={{ \n                      backgroundColor: stageText === 'Closed Won' ? 'hsl(142 71% 45%)' : 'hsl(25 95% 53%)'\n                    }}\n                    initial={{ scale: 0, opacity: 0 }}\n                    animate={{ \n                      scale: stageText === 'Closed Won' ? [1, 1.3, 1.1, 1] : 1,\n                      opacity: 1,\n                      rotate: stageText === 'Closed Won' ? [0, 10, -10, 0] : 0\n                    }}\n                    transition={{ \n                      scale: { delay: 0.3, type: \"spring\", stiffness: 400, damping: 15 },\n                      opacity: { delay: 0.3, type: \"spring\", stiffness: 400, damping: 15 },\n                      rotate: { delay: stageText === 'Closed Won' ? 0.5 : 0, duration: 0.6 }\n                    }}\n                  >\n                    {stageText === 'Closed Won' ? (\n                      <motion.span \n                        className=\"text-white font-bold text-lg\"\n                        initial={{ scale: 0.8 }}\n                        animate={{ scale: 1 }}\n                        transition={{ delay: 0.8, type: \"spring\", stiffness: 500, damping: 15 }}\n                      >\n                        ✓\n                      </motion.span>\n                    ) : (\n                      <Building2 className=\"w-6 h-6 text-white\" />\n                    )}\n                  </motion.div>\n                </motion.div>\n\n              </motion.div>\n            </div>\n          )}\n\n          {/* Step 5: Sales Achievement - 3 Months of Pipeline Success */}\n          {currentStep === 4 && (\n            <div className=\"relative w-full h-full flex items-center justify-center\">\n              {/* 3-Month pipeline performance chart */}\n              <motion.div\n                className=\"relative flex items-end space-x-6\"\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: 0.3, duration: 0.8 }}\n              >\n                {/* Month 1 - October */}\n                <div className=\"flex flex-col items-center\">\n                  <div className=\"flex items-end space-x-2\">\n                    {/* Target bar */}\n                    <motion.div\n                      className=\"w-8 rounded-t-lg\"\n                      style={{ backgroundColor: 'hsl(25 95% 53%)' }}\n                      initial={{ height: 0 }}\n                      animate={{ height: 80 }}\n                      transition={{ delay: 0.3, duration: 0.8, ease: [0.25, 0.46, 0.45, 0.94] }}\n                    />\n                    {/* Achievement bar */}\n                    <motion.div\n                      className=\"w-8 rounded-t-lg\"\n                      style={{ backgroundColor: 'hsl(142 71% 45%)' }}\n                      initial={{ height: 0 }}\n                      animate={{ height: 95 }}\n                      transition={{ delay: 0.5, duration: 0.9, ease: [0.25, 0.46, 0.45, 0.94] }}\n                    />\n                  </div>\n                  <div className=\"mt-2 text-center\">\n                    <div className=\"text-xs font-bold text-gray-600 dark:text-gray-400\">Oct</div>\n                    <div className=\"text-xs text-gray-500 dark:text-gray-500\">$190K</div>\n                  </div>\n                </div>\n\n                {/* Month 2 - November */}\n                <div className=\"flex flex-col items-center\">\n                  <div className=\"flex items-end space-x-2\">\n                    {/* Target bar */}\n                    <motion.div\n                      className=\"w-8 rounded-t-lg\"\n                      style={{ backgroundColor: 'hsl(25 95% 53%)' }}\n                      initial={{ height: 0 }}\n                      animate={{ height: 90 }}\n                      transition={{ delay: 0.6, duration: 0.8, ease: [0.25, 0.46, 0.45, 0.94] }}\n                    />\n                    {/* Achievement bar */}\n                    <motion.div\n                      className=\"w-8 rounded-t-lg\"\n                      style={{ backgroundColor: 'hsl(142 71% 45%)' }}\n                      initial={{ height: 0 }}\n                      animate={{ height: 110 }}\n                      transition={{ delay: 0.8, duration: 0.9, ease: [0.25, 0.46, 0.45, 0.94] }}\n                    />\n                  </div>\n                  <div className=\"mt-2 text-center\">\n                    <div className=\"text-xs font-bold text-gray-600 dark:text-gray-400\">Nov</div>\n                    <div className=\"text-xs text-gray-500 dark:text-gray-500\">$220K</div>\n                  </div>\n                </div>\n\n                {/* Month 3 - December (Current month with animation) */}\n                <div className=\"flex flex-col items-center\">\n                  <div className=\"flex items-end space-x-2\">\n                    {/* Target bar */}\n                    <motion.div\n                      className=\"w-8 rounded-t-lg\"\n                      style={{ backgroundColor: 'hsl(25 95% 53%)' }}\n                      initial={{ height: 0 }}\n                      animate={{ height: 100 }}\n                      transition={{ delay: 0.9, duration: 0.8, ease: [0.25, 0.46, 0.45, 0.94] }}\n                    />\n                    {/* Achievement bar - with growth animation */}\n                    <motion.div\n                      className=\"w-8 rounded-t-lg\"\n                      style={{ backgroundColor: 'hsl(142 71% 45%)' }}\n                      initial={{ height: 0 }}\n                      animate={{ height: 130 }}\n                      transition={{ delay: 1.2, duration: 1.2, ease: [0.23, 1, 0.32, 1] }}\n                    />\n                  </div>\n                  <div className=\"mt-2 text-center\">\n                    <div className=\"text-xs font-bold text-gray-600 dark:text-gray-400\">Dec</div>\n                    <div className=\"text-xs text-gray-500 dark:text-gray-500\">$260K</div>\n                  </div>\n                </div>\n\n                {/* Legend */}\n                <div className=\"absolute -bottom-10 left-1/2 transform -translate-x-1/2 flex space-x-6\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-3 h-3 rounded-full\" style={{ backgroundColor: 'hsl(25 95% 53%)' }} />\n                    <div className=\"text-xs font-bold\" style={{ color: 'hsl(25 95% 53%)' }}>Target</div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-3 h-3 rounded-full\" style={{ backgroundColor: 'hsl(142 71% 45%)' }} />\n                    <div className=\"text-xs font-bold whitespace-nowrap\" style={{ color: 'hsl(142 71% 45%)' }}>The Pipeline Group</div>\n                  </div>\n                </div>\n\n              </motion.div>\n            </div>\n          )}\n\n        </motion.div>\n      </AnimatePresence>\n\n      {/* Step indicators */}\n      <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 flex space-x-2\">\n        {[...Array(totalSteps)].map((_, index) => (\n          <motion.div\n            key={index}\n            className=\"w-2 h-2 rounded-full\"\n            style={{\n              backgroundColor: index === currentStep ? 'hsl(25 95% 53%)' : 'hsl(220 8% 60%)'\n            }}\n            animate={{\n              scale: index === currentStep ? 1.5 : 1,\n            }}\n            transition={{ duration: 0.3 }}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":45580},"client/src/components/ProofBar.tsx":{"content":"import { motion, useInView } from \"framer-motion\";\nimport { useRef, useState, useEffect } from \"react\";\nimport { Check, X } from \"lucide-react\";\n\nexport default function ProofBar() {\n  // todo: remove mock functionality - replace with real client logos\n  const clientLogos = [\n    \"Broadcom\", \"Island\", \"Seagate\", \"HID Global\", \"Hexagon ETQ\", \n    \"Threat Modeler\", \"LRN\", \"AuthID\", \"Carasoft\", \"TD Synnex\",\n    \"Westcon\", \"Invictus Capital\", \"Taleo Capital\", \"Falfurrias Capital Partners\"\n  ];\n\n  // Create enough logos to ensure complete rows for all responsive breakpoints\n  // LCM of 2,3,4,5,6 = 60, so we need 60 logos total for perfect rows\n  const extendedLogos = [];\n  while (extendedLogos.length < 60) {\n    extendedLogos.push(...clientLogos);\n  }\n  const completeLogos = extendedLogos.slice(0, 60); // Exactly 60 logos\n\n  const comparisonRef = useRef(null);\n  const isInView = useInView(comparisonRef, { once: true });\n\n  const comparisonData = [\n    {\n      competitor: \"Basic appointment setting\",\n      tpg: \"Full-funnel SDR-as-a-Service solution\",\n      competitorHas: false,\n      tpgHas: true,\n    },\n    {\n      competitor: \"Limited data sources\",\n      tpg: \"Access to 28+ validated data sources\",\n      competitorHas: false,\n      tpgHas: true,\n    },\n    {\n      competitor: \"No buyer intent modeling\",\n      tpg: \"Sophisticated propensity modeling with 1000+ signals\",\n      competitorHas: false,\n      tpgHas: true,\n    },\n    {\n      competitor: \"Quantity focused KPIs\",\n      tpg: \"Opportunity ROI focused KPIs\",\n      competitorHas: false,\n      tpgHas: true,\n    },\n    {\n      competitor: \"Limited visibility into performance\",\n      tpg: \"Real-time Control Plane dashboard\",\n      competitorHas: false,\n      tpgHas: true,\n    },\n    {\n      competitor: \"No talent acquisition path\",\n      tpg: \"Temp-to-perm flexibility for top performers\",\n      competitorHas: false,\n      tpgHas: true,\n    },\n    {\n      competitor: \"Legacy technology\",\n      tpg: \"Industry-leading Agentic AI roadmap\",\n      competitorHas: false,\n      tpgHas: true,\n    },\n  ];\n\n  return (\n    <section className=\"py-16 px-8 border-b\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"text-center space-y-12\">\n          <div className=\"space-y-8\">\n            <p className=\"text-sm text-muted-foreground font-medium\" data-testid=\"text-trusted-by\">\n              Trusted by over 125 companies\n            </p>\n            <div className=\"relative h-40 overflow-hidden\">\n              <motion.div\n                className=\"space-y-4\"\n                animate={{ y: [0, -1200] }}\n                transition={{\n                  duration: 25,\n                  ease: \"linear\",\n                  repeat: Infinity\n                }}\n              >\n                {/* Create multiple complete sets to ensure seamless looping */}\n                {Array.from({ length: 3 }, (_, setIndex) => (\n                  <div \n                    key={`set-${setIndex}`}\n                    className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-3\"\n                  >\n                    {completeLogos.map((logo, logoIndex) => (\n                      <div \n                        key={`set-${setIndex}-logo-${logoIndex}`}\n                        className=\"bg-muted/30 border border-border rounded-lg p-3 flex items-center justify-center min-h-[60px] hover-elevate transition-all duration-300 opacity-60 hover:opacity-100\"\n                        data-testid={`text-client-logo-${setIndex}-${logoIndex}`}\n                      >\n                        <span className=\"text-xs text-muted-foreground font-medium text-center leading-tight\">\n                          {logo}\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                ))}\n              </motion.div>\n              \n              {/* Gradient fade effects */}\n              <div className=\"absolute top-0 left-0 right-0 h-8 bg-gradient-to-b from-background to-transparent pointer-events-none\" />\n              <div className=\"absolute bottom-0 left-0 right-0 h-8 bg-gradient-to-t from-background to-transparent pointer-events-none\" />\n            </div>\n          </div>\n          \n          <div className=\"border-t pt-12\" ref={comparisonRef}>\n            <motion.h3 \n              className=\"text-2xl md:text-3xl font-bold text-center mb-2\" \n              data-testid=\"text-comparison-header\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 20 }}\n              transition={{ duration: 0.6 }}\n            >\n              See Why Leading Companies Are Making The Switch\n            </motion.h3>\n            <motion.p \n              className=\"text-center text-muted-foreground mb-8 text-sm\"\n              initial={{ opacity: 0 }}\n              animate={isInView ? { opacity: 1 } : { opacity: 0 }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n            >\n              Compare what you get with TPG versus traditional outsourced SDR providers\n            </motion.p>\n            \n            <div className=\"max-w-4xl mx-auto\">\n              {/* Column Headers */}\n              <div className=\"grid grid-cols-2 gap-0 mb-3 sticky top-0 bg-background z-10\">\n                <div className=\"text-center py-2 px-3 text-xs font-bold text-slate-600 uppercase tracking-wide border-b-2 border-slate-300\">\n                  Other Outsourced Companies\n                </div>\n                <div className=\"text-center py-2 px-3 text-xs font-bold text-primary uppercase tracking-wide border-b-2 border-primary\">\n                  What You Get With TPG\n                </div>\n              </div>\n\n              {/* Comparison Table */}\n              <motion.div\n                className=\"border border-slate-200 rounded-lg overflow-hidden\"\n                initial={{ opacity: 0, y: 16 }}\n                animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 16 }}\n                transition={{ duration: 0.6, delay: 0.3 }}\n              >\n                {comparisonData.map((item, index) => (\n                  <div \n                    key={index} \n                    className={`grid grid-cols-2 ${index % 2 === 0 ? 'bg-slate-50/50' : 'bg-white'} ${index !== comparisonData.length - 1 ? 'border-b border-slate-200' : ''}`}\n                    data-testid={`comparison-row-${index}`}\n                  >\n                    {/* Competitor Column */}\n                    <div className=\"flex items-start gap-2 p-3 border-r border-slate-200\">\n                      <X className=\"w-3.5 h-3.5 text-red-600 flex-shrink-0 mt-0.5\" />\n                      <p className=\"text-sm text-slate-600 leading-tight\">{item.competitor}</p>\n                    </div>\n\n                    {/* TPG Column */}\n                    <div className=\"flex items-start gap-2 p-3 bg-primary/[0.02]\">\n                      <Check className=\"w-3.5 h-3.5 text-primary flex-shrink-0 mt-0.5\" />\n                      <p className=\"text-sm text-slate-800 leading-tight\">\n                        <span className=\"font-semibold\">{item.tpg.split(' ').slice(0, 3).join(' ')}</span>\n                        {item.tpg.split(' ').length > 3 && ` ${item.tpg.split(' ').slice(3).join(' ')}`}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </motion.div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":7520},"client/src/components/ResultsSection.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Target, BarChart3, Zap, TrendingUp, Activity, Database } from \"lucide-react\";\nimport dashboardImage from \"@assets/generated_images/Analytics_dashboard_visualization_051e7bd7.png\";\nimport { motion, useInView } from \"framer-motion\";\nimport { useRef, useState, useEffect } from \"react\";\n\nexport default function ResultsSection() {\n  const sectionRef = useRef(null);\n  const isInView = useInView(sectionRef, { once: true, margin: \"-100px\" });\n  const [activeFeature, setActiveFeature] = useState(0);\n  const [liveMetrics, setLiveMetrics] = useState({\n    deals: 127,\n    conversion: 34.2,\n    revenue: 2840000\n  });\n\n  // Auto-cycle through features and simulate live data\n  useEffect(() => {\n    if (!isInView) return;\n\n    const interval = setInterval(() => {\n      setActiveFeature(prev => (prev + 1) % 3);\n      \n      // Simulate live dashboard data updates\n      setLiveMetrics(prev => ({\n        deals: prev.deals + Math.floor(Math.random() * 3),\n        conversion: +(prev.conversion + (Math.random() - 0.5) * 0.5).toFixed(1),\n        revenue: prev.revenue + Math.floor(Math.random() * 10000)\n      }));\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, [isInView]);\n\n  const features = [\n    {\n      icon: Target,\n      title: \"Full-funnel execution\",\n      description: \"From first touch to closed deal, TPG provides on-demand xDR teams and proprietary AI tooling.\",\n      color: \"from-blue-500 to-cyan-500\",\n      bgColor: \"bg-blue-500/10\",\n      metrics: [\"Active Campaigns: 47\", \"Response Rate: 34.2%\", \"Pipeline Value: $2.8M\"]\n    },\n    {\n      icon: BarChart3,\n      title: \"Data-driven GTM insights\",\n      description: \"Our Bloomberg Terminal-like dashboards and AI copilot help identify pricing objections, market headwinds/tailwinds, and conversation trends in real time.\",\n      color: \"from-green-500 to-emerald-500\",\n      bgColor: \"bg-green-500/10\",\n      metrics: [\"Data Points: 847K\", \"Patterns Detected: 23\", \"Accuracy: 94.7%\"]\n    },\n    {\n      icon: Zap,\n      title: \"Built for PE-backed speed\",\n      description: \"We partner with financial sponsors and growth leaders to turn portfolio-wide GTM into a competitive advantage.\",\n      color: \"from-purple-500 to-pink-500\",\n      bgColor: \"bg-purple-500/10\",\n      metrics: [\"Time to Market: 14 days\", \"ROI Increase: 312%\", \"Portfolio Companies: 15\"]\n    }\n  ];\n\n  return (\n    <section ref={sectionRef} id=\"results\" className=\"py-24 px-8 relative overflow-hidden\">\n      {/* Animated background grid */}\n      <div className=\"absolute inset-0 opacity-5\">\n        <div className=\"absolute inset-0 bg-[linear-gradient(to_right,#80808012_1px,transparent_1px),linear-gradient(to_bottom,#80808012_1px,transparent_1px)] bg-[size:24px_24px]\" />\n      </div>\n\n      <div className=\"max-w-6xl mx-auto relative\">\n        <div className=\"space-y-16\">\n          {/* Animated Header */}\n          <motion.div \n            className=\"text-center space-y-6\"\n            initial={{ opacity: 0, y: 50 }}\n            animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 50 }}\n            transition={{ duration: 0.8, ease: \"easeOut\" }}\n          >\n            <h2 className=\"text-4xl font-medium text-foreground\" data-testid=\"text-results-headline\">\n              How We Deliver Results\n            </h2>\n            <div className=\"w-20 h-1 bg-gradient-to-r from-primary to-primary/50 mx-auto rounded-full\" />\n          </motion.div>\n\n          <div className=\"grid lg:grid-cols-2 gap-16 items-center\">\n            {/* Enhanced Features List */}\n            <div className=\"space-y-6\">\n              {features.map((feature, index) => {\n                const Icon = feature.icon;\n                const isActive = activeFeature === index;\n                \n                return (\n                  <motion.div\n                    key={index}\n                    className={`group relative p-6 rounded-xl border transition-all duration-500 cursor-pointer hover-elevate ${\n                      isActive \n                        ? 'border-primary/50 bg-primary/5' \n                        : 'border-border hover:border-primary/30'\n                    }`}\n                    data-testid={`feature-${index}`}\n                    initial={{ opacity: 0, x: -50 }}\n                    animate={isInView ? { opacity: 1, x: 0 } : { opacity: 0, x: -50 }}\n                    transition={{ duration: 0.6, delay: index * 0.2 }}\n                    onMouseEnter={() => setActiveFeature(index)}\n                    whileHover={{ scale: 1.02 }}\n                  >\n                    {/* Terminal-style indicator */}\n                    <div className={`absolute left-0 top-0 w-1 h-full rounded-r transition-all duration-500 ${\n                      isActive ? 'bg-gradient-to-b ' + feature.color : 'bg-border'\n                    }`} />\n                    \n                    <div className=\"flex gap-6\">\n                      <div className=\"flex-shrink-0\">\n                        <motion.div \n                          className={`w-14 h-14 rounded-xl flex items-center justify-center transition-all duration-500 ${\n                            isActive ? feature.bgColor : 'bg-muted'\n                          }`}\n                          animate={{ rotate: isActive ? [0, 5, -5, 0] : 0 }}\n                          transition={{ duration: 0.5 }}\n                        >\n                          <Icon className={`w-7 h-7 transition-colors duration-500 ${\n                            isActive ? 'text-primary' : 'text-muted-foreground'\n                          }`} />\n                        </motion.div>\n                      </div>\n                      <div className=\"space-y-3 flex-1\">\n                        <h3 className={`text-xl font-medium transition-colors duration-300 ${\n                          isActive ? 'text-foreground' : 'text-foreground/80'\n                        }`}>\n                          {feature.title}\n                        </h3>\n                        <p className=\"text-muted-foreground leading-relaxed\">\n                          {feature.description}\n                        </p>\n                        \n                        {/* Live metrics display */}\n                        <motion.div \n                          className={`grid grid-cols-1 gap-2 mt-4 ${isActive ? 'opacity-100' : 'opacity-0'}`}\n                          animate={{ opacity: isActive ? 1 : 0, height: isActive ? 'auto' : 0 }}\n                          transition={{ duration: 0.3 }}\n                        >\n                          {feature.metrics.map((metric, metricIndex) => (\n                            <div key={metricIndex} className=\"flex items-center gap-2 text-sm\">\n                              <div className=\"w-2 h-2 rounded-full bg-primary animate-pulse\" />\n                              <span className=\"font-mono text-muted-foreground\">{metric}</span>\n                            </div>\n                          ))}\n                        </motion.div>\n                      </div>\n                    </div>\n                  </motion.div>\n                );\n              })}\n            </div>\n            \n            {/* Clean minimalist space */}\n            <div className=\"flex items-center justify-center h-96\">\n              <motion.div\n                className=\"text-center space-y-4\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={isInView ? { opacity: 1, scale: 1 } : { opacity: 0, scale: 0.8 }}\n                transition={{ duration: 0.8, delay: 0.4 }}\n              >\n                <div className=\"w-16 h-16 mx-auto rounded-full bg-gradient-to-br from-primary/20 to-primary/10 flex items-center justify-center\">\n                  <BarChart3 className=\"w-8 h-8 text-primary\" />\n                </div>\n                <p className=\"text-muted-foreground text-sm\">\n                  Interactive dashboard experiences are best demonstrated live\n                </p>\n              </motion.div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":8092},"client/src/components/SolutionsSection.tsx":{"content":"import { Eye, TrendingUp, Navigation } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport { motion } from \"framer-motion\";\nimport { useInView } from \"framer-motion\";\nimport { useRef, useState, useEffect } from \"react\";\n\nexport default function SolutionsSection() {\n  const solutionsRef = useRef(null);\n  const isInView = useInView(solutionsRef, { once: true, margin: \"-100px\" });\n  const [activeStep, setActiveStep] = useState(0);\n  const [showDataFlow, setShowDataFlow] = useState(false);\n  const [hasCompletedFirstCycle, setHasCompletedFirstCycle] = useState(false);\n\n  // Auto-cycle through steps with creative animations\n  useEffect(() => {\n    if (!isInView) return;\n    \n    let isActive = true;\n    let timeoutIds: NodeJS.Timeout[] = [];\n    \n    const delay = (ms: number) => {\n      return new Promise<void>((resolve) => {\n        const id = setTimeout(() => {\n          if (isActive) resolve();\n        }, ms);\n        timeoutIds.push(id);\n      });\n    };\n    \n    const runSequence = async () => {\n      while (isActive) {\n        // Initial delay\n        await delay(1000);\n        if (!isActive) break;\n        \n        // Step 1: Data Collection\n        setActiveStep(1);\n        await delay(2500);\n        if (!isActive) break;\n        \n        // Show data flowing to step 2\n        setShowDataFlow(true);\n        await delay(800);\n        if (!isActive) break;\n        \n        // Step 2: Pattern Recognition\n        setActiveStep(2);\n        setShowDataFlow(false);\n        await delay(2500);\n        if (!isActive) break;\n        \n        // Show insights flowing to step 3\n        setShowDataFlow(true);\n        await delay(800);\n        if (!isActive) break;\n        \n        // Step 3: GTM Steering\n        setActiveStep(3);\n        setShowDataFlow(false);\n        await delay(2500);\n        if (!isActive) break;\n        \n        // Reset and loop\n        setActiveStep(0);\n        setHasCompletedFirstCycle(true);\n        await delay(1500);\n      }\n    };\n    \n    runSequence();\n    \n    // Cleanup function\n    return () => {\n      isActive = false;\n      timeoutIds.forEach(id => clearTimeout(id));\n      setActiveStep(0);\n      setShowDataFlow(false);\n    };\n  }, [isInView]);\n\n  const processSteps = [\n    {\n      step: \"01\",\n      icon: Eye,\n      title: \"See It All\",\n      description: \"Gain 100% visibility across your go-to-market efforts. Every lead dispositioned. Every action tracked.\",\n      detail: \"Complete data capture across all touchpoints\",\n      color: \"blue-500, cyan-500\"\n    },\n    {\n      step: \"02\",\n      icon: TrendingUp,\n      title: \"Spot the Patterns\",\n      description: \"Uncover the plays, behaviors, and disciplines that consistently convert or block progress.\",\n      detail: \"AI-powered pattern recognition and insights\",\n      color: \"green-500, emerald-500\"\n    },\n    {\n      step: \"03\",\n      icon: Navigation,\n      title: \"Steer the GTM\",\n      description: \"Direct people, processes, and investment where they matter most so pipeline turns into predictable revenue.\",\n      detail: \"Data-driven optimization and resource allocation\",\n      color: \"orange-500, red-500\"\n    }\n  ];\n\n\n  return (\n    <section id=\"solutions\" className=\"py-24 px-8 bg-card\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"text-center space-y-16\">\n          \n\n          <motion.div \n            ref={solutionsRef}\n            className=\"space-y-8 relative\"\n          >\n            {/* Animated Background Elements */}\n            <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n              {Array.from({ length: 20 }).map((_, i) => (\n                <motion.div\n                  key={i}\n                  className=\"absolute w-1 h-1 bg-primary/20 rounded-full\"\n                  initial={{ \n                    x: Math.random() * 1000, \n                    y: Math.random() * 600,\n                    scale: 0 \n                  }}\n                  animate={isInView ? {\n                    y: [null, Math.random() * 600 - 50],\n                    scale: [0, 1, 0],\n                    opacity: [0, 0.6, 0]\n                  } : {}}\n                  transition={{\n                    duration: 3 + Math.random() * 2,\n                    repeat: Infinity,\n                    delay: Math.random() * 2,\n                    ease: \"easeInOut\"\n                  }}\n                />\n              ))}\n            </div>\n\n            <motion.h3 \n              className=\"text-2xl font-medium text-foreground relative z-10\" \n              data-testid=\"text-our-solutions\"\n              initial={{ opacity: 0, y: 30 }}\n              animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 30 }}\n              transition={{ duration: 0.6, ease: \"easeOut\" }}\n            >\n              <motion.span\n                initial={{ backgroundSize: \"0% 100%\" }}\n                animate={isInView ? { backgroundSize: \"100% 100%\" } : {}}\n                transition={{ duration: 1.2, delay: 0.5 }}\n                className=\"bg-gradient-to-r from-primary/20 to-primary/10 bg-no-repeat bg-left-bottom\"\n                style={{ backgroundImage: `linear-gradient(120deg, hsl(25 95% 53% / 0.3) 0%, transparent 100%)` }}\n              >\n                Our Process\n              </motion.span>\n            </motion.h3>\n            \n            {/* Process Flow Subtitle */}\n            <motion.p \n              className=\"text-muted-foreground text-center max-w-2xl mx-auto\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 20 }}\n              transition={{ duration: 0.6, delay: 0.3, ease: \"easeOut\" }}\n            >\n              A systematic approach to transforming your go-to-market engine into a predictable revenue machine\n            </motion.p>\n            \n            {/* Creative Animated Process Flow */}\n            <div className=\"relative z-10 min-h-[600px] flex items-center justify-center\">\n              {/* Process Flow Container */}\n              <div className=\"relative w-full max-w-5xl\">\n                {/* Timeline Base */}\n                <motion.div \n                  className=\"absolute top-1/2 left-0 right-0 h-1 bg-gradient-to-r from-muted to-muted/50 rounded-full transform -translate-y-1/2\"\n                  initial={{ scaleX: 0 }}\n                  animate={isInView ? { scaleX: 1 } : { scaleX: 0 }}\n                  transition={{ duration: 1, delay: 0.5 }}\n                />\n\n                {/* Progress Indicator */}\n                <motion.div \n                  className=\"absolute top-1/2 left-0 h-1 bg-gradient-to-r from-primary to-primary/80 rounded-full transform -translate-y-1/2 z-10\"\n                  initial={{ scaleX: 0 }}\n                  animate={isInView ? { \n                    scaleX: activeStep === 0 ? 0 : \n                           activeStep === 1 ? 0.33 : \n                           activeStep === 2 ? 0.66 : 1 \n                  } : { scaleX: 0 }}\n                  transition={{ duration: 0.8, ease: \"easeInOut\" }}\n                />\n\n                {/* Current Step Status - Above Icons */}\n                <motion.div\n                  className=\"text-center mb-12\"\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.5, delay: 1 }}\n                >\n                  <motion.div \n                    className=\"text-xl font-medium text-foreground mb-2\"\n                    key={activeStep}\n                    initial={{ opacity: 0, y: 10, scale: 0.95 }}\n                    animate={{ opacity: 1, y: 0, scale: 1 }}\n                    exit={{ opacity: 0, y: -10, scale: 1.05 }}\n                    transition={{ duration: 0.4, ease: \"easeOut\" }}\n                  >\n                    {activeStep === 0 && (\n                      <span className=\"bg-gradient-to-r from-primary to-primary/80 bg-clip-text text-transparent\">\n                        {hasCompletedFirstCycle ? \n                          \"🔄 Reiterate, and continually improve\" : \n                          \"✨ Watch our process unfold...\"\n                        }\n                      </span>\n                    )}\n                    {activeStep === 1 && (\n                      <span className=\"bg-gradient-to-r from-blue-500 to-cyan-500 bg-clip-text text-transparent\">\n                        🔍 Capturing every data point across your GTM\n                      </span>\n                    )}\n                    {activeStep === 2 && (\n                      <span className=\"bg-gradient-to-r from-green-500 to-emerald-500 bg-clip-text text-transparent\">\n                        🧠 AI analyzing patterns and identifying opportunities\n                      </span>\n                    )}\n                    {activeStep === 3 && (\n                      <span className=\"bg-gradient-to-r from-orange-500 to-red-500 bg-clip-text text-transparent\">\n                        🎯 Optimizing and steering your revenue engine\n                      </span>\n                    )}\n                  </motion.div>\n                  \n                  {/* Animated underline */}\n                  <motion.div\n                    className=\"h-0.5 bg-gradient-to-r from-transparent via-primary to-transparent mx-auto\"\n                    initial={{ width: 0, opacity: 0 }}\n                    animate={{ \n                      width: activeStep > 0 ? \"200px\" : \"100px\",\n                      opacity: 1 \n                    }}\n                    transition={{ duration: 0.6, ease: \"easeOut\" }}\n                  />\n                </motion.div>\n\n                {/* Process Steps */}\n                <div className=\"flex justify-between items-center relative z-20\">\n                  {processSteps.map((step, index) => {\n                    const stepNumber = index + 1;\n                    const Icon = step.icon;\n                    const isActive = activeStep === stepNumber;\n                    const isCompleted = activeStep > stepNumber;\n\n                    return (\n                      <div key={index} className=\"flex flex-col items-center relative\">\n                        {/* Step Node */}\n                        <motion.div\n                          className=\"relative mb-8\"\n                          initial={{ scale: 0.8, opacity: 0 }}\n                          animate={isInView ? { \n                            scale: isActive ? 1.2 : 1, \n                            opacity: 1 \n                          } : { scale: 0.8, opacity: 0 }}\n                          transition={{ \n                            duration: 0.6, \n                            delay: index * 0.2,\n                            type: \"spring\",\n                            stiffness: 200\n                          }}\n                        >\n                          {/* Pulsing Ring for Active Step */}\n                          {isActive && (\n                            <motion.div\n                              className=\"absolute inset-0 rounded-full blur-md bg-primary/40\"\n                              animate={{\n                                scale: [1, 1.3, 1],\n                                opacity: [0.3, 0.7, 0.3]\n                              }}\n                              transition={{\n                                duration: 2,\n                                repeat: Infinity,\n                                ease: \"easeInOut\"\n                              }}\n                            />\n                          )}\n\n                          {/* Step Circle */}\n                          <motion.div\n                            className={`w-24 h-24 rounded-full flex items-center justify-center relative z-10 border-4 ${\n                              isActive ? 'bg-primary border-white' :\n                              isCompleted ? 'bg-primary border-primary' :\n                              'bg-muted border-border'\n                            }`}\n                            animate={{\n                              boxShadow: isActive ? \n                                '0 0 40px hsl(25 95% 53% / 0.5)' : \n                                '0 0 0px hsl(25 95% 53% / 0)'\n                            }}\n                            transition={{ duration: 0.4 }}\n                          >\n                            {/* Step Number Badge */}\n                            <motion.div \n                              className={`absolute -top-2 -right-2 w-8 h-8 rounded-full flex items-center justify-center text-white font-bold text-sm z-20 bg-primary ${\n                                isActive ? 'shadow-lg shadow-primary/60' : ''\n                              }`}\n                              animate={{\n                                scale: isActive ? 1.1 : 1,\n                                rotate: isActive ? 360 : 0\n                              }}\n                              transition={{ duration: 0.6 }}\n                            >\n                              {step.step}\n                            </motion.div>\n\n                            {/* Icon */}\n                            <motion.div\n                              animate={{\n                                scale: isActive ? 1.1 : 1,\n                                rotate: isActive ? [0, 10, -10, 0] : 0\n                              }}\n                              transition={{ \n                                scale: { duration: 0.3 },\n                                rotate: { duration: 1, repeat: isActive ? Infinity : 0 }\n                              }}\n                            >\n                              <Icon \n                                className={`w-10 h-10 ${\n                                  isActive || isCompleted ? 'text-white' : 'text-muted-foreground'\n                                }`}\n                              />\n                            </motion.div>\n                          </motion.div>\n\n                          {/* Floating Particles for Active Step */}\n                          {isActive && Array.from({ length: 8 }).map((_, i) => (\n                            <motion.div\n                              key={i}\n                              className=\"absolute w-2 h-2 bg-primary rounded-full\"\n                              initial={{ \n                                x: 0, \n                                y: 0,\n                                scale: 0,\n                                opacity: 0\n                              }}\n                              animate={{\n                                x: Math.cos(i * 45 * Math.PI / 180) * 80,\n                                y: Math.sin(i * 45 * Math.PI / 180) * 80,\n                                scale: [0, 1, 0],\n                                opacity: [0, 1, 0]\n                              }}\n                              transition={{\n                                duration: 2.5,\n                                repeat: Infinity,\n                                delay: i * 0.2,\n                                ease: \"easeInOut\"\n                              }}\n                            />\n                          ))}\n                        </motion.div>\n\n                        {/* Step Card */}\n                        <motion.div\n                          initial={{ opacity: 0, y: 30, scale: 0.9 }}\n                          animate={{\n                            opacity: isActive ? 1 : 0.4,\n                            y: isActive ? 0 : 30,\n                            scale: isActive ? 1 : 0.9\n                          }}\n                          transition={{ duration: 0.6, ease: \"easeOut\" }}\n                          className=\"relative\"\n                        >\n                          <Card className={`w-72 p-6 text-center space-y-4 relative overflow-hidden ${\n                            isActive ? 'border-primary shadow-2xl bg-primary/5' : 'border-muted bg-card'\n                          }`}>\n                            {/* Spotlight Effect for Active Step */}\n                            {isActive && (\n                              <motion.div\n                                className=\"absolute inset-0 bg-gradient-to-br from-primary/10 to-transparent\"\n                                initial={{ opacity: 0 }}\n                                animate={{ opacity: 1 }}\n                                transition={{ duration: 0.5 }}\n                              />\n                            )}\n\n                            <div className=\"relative z-10\">\n                              <motion.h4 \n                                className={`text-lg font-semibold ${\n                                  isActive ? 'text-foreground' : 'text-muted-foreground'\n                                }`}\n                                animate={{\n                                  scale: isActive ? 1.05 : 1\n                                }}\n                                transition={{ duration: 0.3 }}\n                              >\n                                {step.title}\n                              </motion.h4>\n                              \n                              <motion.p \n                                className=\"text-sm leading-relaxed text-muted-foreground\"\n                                animate={{\n                                  opacity: isActive ? 1 : 0.6\n                                }}\n                                transition={{ duration: 0.3 }}\n                              >\n                                {step.description}\n                              </motion.p>\n\n                              <motion.div\n                                className=\"text-xs font-medium text-primary\"\n                                animate={{\n                                  opacity: isActive ? 1 : 0.4,\n                                  scale: isActive ? 1 : 0.95\n                                }}\n                                transition={{ duration: 0.3 }}\n                              >\n                                {step.detail}\n                              </motion.div>\n                            </div>\n                          </Card>\n                        </motion.div>\n\n                        {/* Data Flow Animation */}\n                        {showDataFlow && index < processSteps.length - 1 && activeStep === stepNumber && (\n                          <motion.div\n                            className=\"absolute top-12 left-full w-32 h-1 overflow-hidden\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            transition={{ duration: 0.2 }}\n                          >\n                            {Array.from({ length: 8 }).map((_, i) => (\n                              <motion.div\n                                key={i}\n                                className=\"absolute w-2 h-2 bg-primary rounded-full\"\n                                initial={{ x: -10, scale: 0 }}\n                                animate={{ \n                                  x: 140,\n                                  scale: [0, 1, 0]\n                                }}\n                                transition={{\n                                  duration: 0.8,\n                                  delay: i * 0.1,\n                                  ease: \"easeInOut\"\n                                }}\n                              />\n                            ))}\n                          </motion.div>\n                        )}\n                      </div>\n                    );\n                  })}\n                </div>\n\n              </div>\n            </div>\n          </motion.div>\n\n          {/* CTA Section */}\n          <motion.div\n            className=\"mt-16 text-center\"\n            initial={{ opacity: 0, y: 30 }}\n            animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 30 }}\n            transition={{ duration: 0.6, delay: 1.5 }}\n          >\n            <motion.button\n              className=\"inline-flex items-center gap-3 px-8 py-4 bg-primary text-white font-medium rounded-lg hover-elevate transition-all duration-300 shadow-lg hover:shadow-xl group\"\n              data-testid=\"button-see-full-process\"\n              whileHover={{ scale: 1.05 }}\n              whileTap={{ scale: 0.95 }}\n            >\n              <span>See our full process</span>\n              <motion.div\n                animate={{ x: [0, 5, 0] }}\n                transition={{ duration: 1.5, repeat: Infinity }}\n              >\n                →\n              </motion.div>\n            </motion.button>\n          </motion.div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":20645},"client/src/components/TestimonialsSection.tsx":{"content":"import { Card } from \"@/components/ui/card\";\nimport { Quote, Star, TrendingUp, CheckCircle, Building2, Users, Zap } from \"lucide-react\";\nimport { motion, useInView, AnimatePresence } from \"framer-motion\";\nimport { useRef, useState, useEffect } from \"react\";\n\nexport default function TestimonialsSection() {\n  const sectionRef = useRef(null);\n  const isInView = useInView(sectionRef, { once: true, margin: \"-100px\" });\n  const [activeTestimonial, setActiveTestimonial] = useState(0);\n  const [showMetrics, setShowMetrics] = useState(false);\n\n  const testimonials = [\n    {\n      quote: \"TPG gave us complete visibility and a 3.5x ROI in less than a year.\",\n      author: \"CMO\",\n      company: \"Island\",\n      icon: TrendingUp,\n      color: \"from-green-500 to-emerald-500\",\n      bgColor: \"bg-green-500/10\",\n      metrics: [\"ROI: 3.5x\", \"Visibility: 100%\", \"Timeline: 11 months\"],\n      rating: 5\n    },\n    {\n      quote: \"Every lead now has an owner and next step. No more black holes.\",\n      author: \"CRO\", \n      company: \"Broadcom\",\n      icon: CheckCircle,\n      color: \"from-blue-500 to-cyan-500\",\n      bgColor: \"bg-blue-500/10\",\n      metrics: [\"Lead Coverage: 100%\", \"Response Time: 2hr\", \"Conversion: +45%\"],\n      rating: 5\n    },\n    {\n      quote: \"The Bloomberg Terminal-like insights helped us identify pricing objections we never saw coming.\",\n      author: \"VP Sales\",\n      company: \"Seagate\",\n      icon: Zap,\n      color: \"from-purple-500 to-pink-500\",\n      bgColor: \"bg-purple-500/10\",\n      metrics: [\"Insights: 847\", \"Objections ID'd: 23\", \"Win Rate: +34%\"],\n      rating: 5\n    }\n  ];\n\n  // Auto-cycle through testimonials\n  useEffect(() => {\n    if (!isInView) return;\n\n    const interval = setInterval(() => {\n      setActiveTestimonial(prev => (prev + 1) % testimonials.length);\n    }, 4000);\n\n    // Show metrics after first cycle\n    const metricsTimeout = setTimeout(() => {\n      setShowMetrics(true);\n    }, 2000);\n\n    return () => {\n      clearInterval(interval);\n      clearTimeout(metricsTimeout);\n    };\n  }, [isInView, testimonials.length]);\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.3\n      }\n    }\n  };\n\n  const cardVariants = {\n    hidden: { opacity: 0, y: 50, scale: 0.9 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      scale: 1,\n      transition: {\n        duration: 0.6,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  return (\n    <section ref={sectionRef} className=\"py-24 px-8 bg-card relative overflow-hidden\">\n      {/* Background terminal effects */}\n      <div className=\"absolute inset-0 opacity-10\">\n        <div className=\"absolute top-0 left-0 w-full h-full bg-[radial-gradient(circle_at_center,#ffffff08_1px,transparent_1px)] bg-[size:30px_30px]\" />\n        <motion.div\n          className=\"absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-transparent via-primary/30 to-transparent\"\n          animate={{ x: ['-100%', '200%'] }}\n          transition={{ duration: 3, repeat: Infinity, ease: \"linear\" }}\n        />\n      </div>\n\n      <div className=\"max-w-6xl mx-auto relative\">\n        <div className=\"space-y-16\">\n          {/* Enhanced Header */}\n          <motion.div \n            className=\"text-center space-y-6\"\n            initial={{ opacity: 0, y: 50 }}\n            animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 50 }}\n            transition={{ duration: 0.8, ease: \"easeOut\" }}\n          >\n            <h2 className=\"text-4xl font-medium text-foreground\" data-testid=\"text-testimonials-headline\">\n              Trusted by Industry Leaders\n            </h2>\n            <div className=\"flex items-center justify-center gap-2\">\n              <div className=\"flex\">\n                {[...Array(5)].map((_, i) => (\n                  <motion.div\n                    key={i}\n                    initial={{ opacity: 0, scale: 0 }}\n                    animate={isInView ? { opacity: 1, scale: 1 } : { opacity: 0, scale: 0 }}\n                    transition={{ duration: 0.3, delay: 0.8 + i * 0.1 }}\n                  >\n                    <Star className=\"w-5 h-5 text-primary fill-primary\" />\n                  </motion.div>\n                ))}\n              </div>\n              <span className=\"text-muted-foreground ml-2\">5.0 from industry leaders</span>\n            </div>\n          </motion.div>\n\n          {/* Live metrics dashboard */}\n          <AnimatePresence>\n            {showMetrics && (\n              <motion.div\n                className=\"flex justify-center mb-8\"\n                initial={{ opacity: 0, y: -20 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: -20 }}\n                transition={{ duration: 0.5 }}\n              >\n                <div className=\"bg-background/50 backdrop-blur-sm border rounded-lg p-4 flex items-center gap-6\">\n                  <div className=\"flex items-center gap-2\">\n                    <Users className=\"w-4 h-4 text-primary\" />\n                    <span className=\"text-sm font-mono text-foreground\">3 Fortune 500</span>\n                  </div>\n                  <div className=\"w-px h-4 bg-border\" />\n                  <div className=\"flex items-center gap-2\">\n                    <Building2 className=\"w-4 h-4 text-green-500\" />\n                    <span className=\"text-sm font-mono text-foreground\">$12B+ Portfolio</span>\n                  </div>\n                  <div className=\"w-px h-4 bg-border\" />\n                  <div className=\"flex items-center gap-2\">\n                    <TrendingUp className=\"w-4 h-4 text-blue-500\" />\n                    <span className=\"text-sm font-mono text-foreground\">312% Avg ROI</span>\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n\n          {/* Enhanced Testimonials Grid */}\n          <motion.div \n            className=\"grid md:grid-cols-3 gap-8\"\n            variants={containerVariants}\n            initial=\"hidden\"\n            animate={isInView ? \"visible\" : \"hidden\"}\n          >\n            {testimonials.map((testimonial, index) => {\n              const Icon = testimonial.icon;\n              const isActive = activeTestimonial === index;\n              \n              return (\n                <motion.div\n                  key={index}\n                  variants={cardVariants}\n                  className=\"relative\"\n                  onMouseEnter={() => setActiveTestimonial(index)}\n                >\n                  <Card \n                    className={`relative p-8 space-y-6 transition-all duration-500 cursor-pointer group overflow-hidden ${\n                      isActive \n                        ? 'border-primary/50 bg-primary/5 scale-105' \n                        : 'hover-elevate'\n                    }`}\n                    data-testid={`card-testimonial-${index}`}\n                  >\n                    {/* Terminal-style status indicator */}\n                    <div className={`absolute top-4 right-4 flex items-center gap-2 ${\n                      isActive ? 'opacity-100' : 'opacity-0'\n                    } transition-opacity duration-300`}>\n                      <div className=\"w-2 h-2 rounded-full bg-green-500 animate-pulse\" />\n                      <span className=\"text-xs font-mono text-muted-foreground\">LIVE</span>\n                    </div>\n\n                    {/* Animated background gradient */}\n                    <div className={`absolute inset-0 bg-gradient-to-br opacity-0 group-hover:opacity-5 transition-opacity duration-500 ${\n                      isActive ? 'opacity-10' : ''\n                    } ${testimonial.color}`} />\n\n                    {/* Quote icon with enhanced styling */}\n                    <div className=\"flex items-center gap-3\">\n                      <motion.div\n                        className={`w-12 h-12 rounded-lg flex items-center justify-center transition-all duration-500 ${\n                          isActive ? testimonial.bgColor : 'bg-muted'\n                        }`}\n                        animate={{ \n                          rotate: isActive ? [0, 5, -5, 0] : 0,\n                          scale: isActive ? [1, 1.1, 1] : 1\n                        }}\n                        transition={{ duration: 0.5 }}\n                      >\n                        <Icon className={`w-6 h-6 transition-colors duration-500 ${\n                          isActive ? 'text-primary' : 'text-muted-foreground'\n                        }`} />\n                      </motion.div>\n                      <Quote className={`w-6 h-6 transition-colors duration-500 ${\n                        isActive ? 'text-primary' : 'text-primary/30'\n                      }`} />\n                    </div>\n\n                    {/* Enhanced quote text */}\n                    <blockquote className={`text-lg leading-relaxed font-medium transition-colors duration-300 ${\n                      isActive ? 'text-foreground' : 'text-foreground/90'\n                    }`}>\n                      \"{testimonial.quote}\"\n                    </blockquote>\n\n                    {/* Author info with rating */}\n                    <div className=\"space-y-3\">\n                      <div className=\"flex\">\n                        {[...Array(testimonial.rating)].map((_, i) => (\n                          <Star key={i} className=\"w-4 h-4 text-primary fill-primary\" />\n                        ))}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        <div className=\"font-medium\">{testimonial.author}</div>\n                        <div className=\"flex items-center gap-2\">\n                          <Building2 className=\"w-3 h-3\" />\n                          {testimonial.company}\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Expandable metrics */}\n                    <AnimatePresence>\n                      {isActive && (\n                        <motion.div\n                          className=\"border-t pt-4 space-y-2\"\n                          initial={{ opacity: 0, height: 0 }}\n                          animate={{ opacity: 1, height: 'auto' }}\n                          exit={{ opacity: 0, height: 0 }}\n                          transition={{ duration: 0.3 }}\n                        >\n                          {testimonial.metrics.map((metric, metricIndex) => (\n                            <motion.div\n                              key={metricIndex}\n                              className=\"flex items-center gap-2 text-sm\"\n                              initial={{ opacity: 0, x: -20 }}\n                              animate={{ opacity: 1, x: 0 }}\n                              transition={{ duration: 0.2, delay: metricIndex * 0.1 }}\n                            >\n                              <div className=\"w-2 h-2 rounded-full bg-primary animate-pulse\" />\n                              <span className=\"font-mono text-muted-foreground\">{metric}</span>\n                            </motion.div>\n                          ))}\n                        </motion.div>\n                      )}\n                    </AnimatePresence>\n\n                    {/* Hover scanning line */}\n                    <motion.div\n                      className=\"absolute bottom-0 left-0 w-full h-0.5 bg-gradient-to-r from-transparent via-primary to-transparent opacity-0 group-hover:opacity-100\"\n                      animate={{ x: ['-100%', '100%'] }}\n                      transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n                    />\n                  </Card>\n\n                  {/* Floating indicator */}\n                  <AnimatePresence>\n                    {isActive && (\n                      <motion.div\n                        className=\"absolute -top-2 -right-2 bg-primary text-primary-foreground text-xs px-2 py-1 rounded-full font-medium shadow-lg\"\n                        initial={{ opacity: 0, scale: 0 }}\n                        animate={{ opacity: 1, scale: 1 }}\n                        exit={{ opacity: 0, scale: 0 }}\n                        transition={{ duration: 0.2 }}\n                      >\n                        Featured\n                      </motion.div>\n                    )}\n                  </AnimatePresence>\n                </motion.div>\n              );\n            })}\n          </motion.div>\n\n          {/* Progress indicators */}\n          <div className=\"flex justify-center gap-2\">\n            {testimonials.map((_, index) => (\n              <motion.button\n                key={index}\n                className={`w-2 h-2 rounded-full transition-all duration-300 ${\n                  activeTestimonial === index \n                    ? 'bg-primary w-8' \n                    : 'bg-border hover:bg-primary/50'\n                }`}\n                onClick={() => setActiveTestimonial(index)}\n                whileHover={{ scale: 1.2 }}\n                whileTap={{ scale: 0.9 }}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":13090},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"light\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"light\",\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(\"theme\") as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme,\n  };\n\n  return (\n    <ThemeProviderContext.Provider value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};","size_bytes":1227},"client/src/components/ThemeToggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"./ThemeProvider\";\n\nexport default function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-4 w-4\" />\n      ) : (\n        <Sun className=\"h-4 w-4\" />\n      )}\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}","size_bytes":592},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Home.tsx":{"content":"import Header from \"@/components/Header\";\nimport HeroSection from \"@/components/HeroSection\";\nimport ProofBar from \"@/components/ProofBar\";\nimport SDRIcebergSection from \"@/components/SDRIcebergSection\";\nimport ProblemSection from \"@/components/ProblemSection\";\nimport ResultsSection from \"@/components/ResultsSection\";\nimport TestimonialsSection from \"@/components/TestimonialsSection\";\nimport CTAFooter from \"@/components/CTAFooter\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <main>\n        <HeroSection />\n        <ProofBar />\n        <SDRIcebergSection />\n        <ProblemSection />\n        <ResultsSection />\n        <TestimonialsSection />\n        <CTAFooter />\n      </main>\n    </div>\n  );\n}","size_bytes":774},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/CTAFooter.tsx":{"content":"import CTAFooter from '../CTAFooter'\n\nexport default function CTAFooterExample() {\n  return <CTAFooter />\n}","size_bytes":107},"client/src/components/examples/Header.tsx":{"content":"import Header from '../Header'\n\nexport default function HeaderExample() {\n  return <Header />\n}","size_bytes":95},"client/src/components/examples/HeroSection.tsx":{"content":"import HeroSection from '../HeroSection'\n\nexport default function HeroSectionExample() {\n  return <HeroSection />\n}","size_bytes":115},"client/src/components/examples/ProblemSection.tsx":{"content":"import ProblemSection from '../ProblemSection'\n\nexport default function ProblemSectionExample() {\n  return <ProblemSection />\n}","size_bytes":127},"client/src/components/examples/ProcessAnimation.tsx":{"content":"import ProcessAnimation from '../ProcessAnimation'\n\nexport default function ProcessAnimationExample() {\n  return <ProcessAnimation />\n}","size_bytes":135},"client/src/components/examples/ProofBar.tsx":{"content":"import ProofBar from '../ProofBar'\n\nexport default function ProofBarExample() {\n  return <ProofBar />\n}","size_bytes":103},"client/src/components/examples/ResultsSection.tsx":{"content":"import ResultsSection from '../ResultsSection'\n\nexport default function ResultsSectionExample() {\n  return <ResultsSection />\n}","size_bytes":127},"client/src/components/examples/SolutionsSection.tsx":{"content":"import SolutionsSection from '../SolutionsSection'\n\nexport default function SolutionsSectionExample() {\n  return <SolutionsSection />\n}","size_bytes":135},"client/src/components/examples/TestimonialsSection.tsx":{"content":"import TestimonialsSection from '../TestimonialsSection'\n\nexport default function TestimonialsSectionExample() {\n  return <TestimonialsSection />\n}","size_bytes":147},"client/src/components/examples/ThemeToggle.tsx":{"content":"import { ThemeProvider } from '../ThemeProvider'\nimport ThemeToggle from '../ThemeToggle'\n\nexport default function ThemeToggleExample() {\n  return (\n    <ThemeProvider>\n      <div className=\"p-4\">\n        <ThemeToggle />\n      </div>\n    </ThemeProvider>\n  )\n}","size_bytes":260},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/SDRIcebergSection.tsx":{"content":"import { motion, useInView } from \"framer-motion\";\nimport { useRef } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Users, Database, Mic, Settings, FileText, Globe, Shield, TrendingUp } from \"lucide-react\";\n\nexport default function CompactCostSection() {\n  const sectionRef = useRef(null);\n  const isInView = useInView(sectionRef, { once: true, margin: \"-50px\" });\n\n  const visibleCosts = [\n    { label: \"Base Salary\", cost: \"$50K\" },\n    { label: \"Commission\", cost: \"$30K\" },\n  ];\n\n  const hiddenCosts = [\n    { \n      icon: Users, \n      label: \"MANAGEMENT\", \n      description: \"Dedicated Manager + Ops Support\",\n      details: [\"$80K+ manager salary\", \"Operations overhead\", \"Performance tracking\"],\n      cost: \"$95K/year\",\n    },\n    { \n      icon: Database, \n      label: \"DATA & TOOLS\", \n      description: \"Lead databases + enrichment tools\",\n      details: [\"Multiple data subscriptions\", \"Contact verification\", \"CRM licensing\"],\n      cost: \"$25K/year\",\n    },\n    { \n      icon: Mic, \n      label: \"VOICE SYSTEMS\", \n      description: \"Dialer + phone infrastructure\",\n      details: [\"Auto-dialer licensing\", \"Phone lines\", \"Call recording\"],\n      cost: \"$15K/year\",\n    },\n    { \n      icon: Settings, \n      label: \"TECH STACK\", \n      description: \"Integration + automation tools\",\n      details: [\"CRM integration\", \"Workflow automation\", \"Reporting systems\"],\n      cost: \"$20K/year\",\n    },\n    { \n      icon: FileText, \n      label: \"CONTENT CREATION\", \n      description: \"Messaging + script development\",\n      details: [\"Email template creation\", \"Call script writing\", \"A/B testing\"],\n      cost: \"$18K/year\",\n    },\n    { \n      icon: Globe, \n      label: \"COMPLIANCE\", \n      description: \"Legal + regulatory requirements\",\n      details: [\"TCPA compliance\", \"Legal review\", \"Training programs\"],\n      cost: \"$12K/year\",\n    },\n    { \n      icon: Shield, \n      label: \"BACKUP & RISK\", \n      description: \"Coverage for sick days, turnover\",\n      details: [\"Replacement costs\", \"Training new hires\", \"Performance gaps\"],\n      cost: \"$35K/year\",\n    },\n  ];\n\n  return (\n    <section className=\"py-16 bg-gradient-to-br from-slate-50 to-orange-50/30\" ref={sectionRef}>\n      <div className=\"container mx-auto px-4\">\n        <div className=\"max-w-4xl mx-auto\">\n          {/* Compact Section Header */}\n          <motion.div\n            className=\"text-center mb-8\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 20 }}\n            transition={{ duration: 0.6 }}\n          >\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-3\">TPG was founded to solve the hidden cost problem in the pipeline generation industry.</h2>\n          </motion.div>\n\n          {/* Cost Summary Bar */}\n          <motion.div\n            className=\"mb-8\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 20 }}\n            transition={{ duration: 0.6, delay: 0.2 }}\n          >\n            <Card className=\"p-6\">\n              <div className=\"space-y-4\">\n                {/* Cost Breakdown Bar */}\n                <div className=\"relative\">\n                  <div className=\"flex rounded-lg overflow-hidden h-16 shadow-inner\">\n                    {/* Visible Portion (26.7%) */}\n                    <motion.div \n                      className=\"bg-gradient-to-r from-green-400 to-green-500 flex items-center justify-center text-white font-bold text-sm overflow-hidden\" \n                      style={{ width: '26.7%' }}\n                      initial={{ x: -200, opacity: 0 }}\n                      animate={isInView ? { x: 0, opacity: 1 } : { x: -200, opacity: 0 }}\n                      transition={{ duration: 0.8, delay: 0.4, ease: \"easeOut\" }}\n                    >\n                      <span>Visible: $80K</span>\n                    </motion.div>\n                    {/* Hidden Portion (73.3%) */}\n                    <motion.div \n                      className=\"bg-gradient-to-r from-red-500 to-red-600 flex items-center justify-center text-white font-bold text-sm overflow-hidden\" \n                      style={{ width: '73.3%' }}\n                      initial={{ x: 200, opacity: 0 }}\n                      animate={isInView ? { x: 0, opacity: 1 } : { x: 200, opacity: 0 }}\n                      transition={{ duration: 0.8, delay: 0.5, ease: \"easeOut\" }}\n                    >\n                      <span>Hidden Infrastructure: $220K</span>\n                    </motion.div>\n                  </div>\n                  \n                  {/* Ratio Pill */}\n                  <motion.div\n                    className=\"absolute -top-2 right-0 bg-slate-800 text-white px-3 py-1 rounded-full text-xs font-bold shadow-lg\"\n                    initial={{ scale: 0 }}\n                    animate={isInView ? { scale: 1 } : { scale: 0 }}\n                    transition={{ duration: 0.4, delay: 0.5 }}\n                  >\n                    Hidden = 2.75× Visible\n                  </motion.div>\n                </div>\n\n                {/* Total Cost Display */}\n                <div className=\"flex justify-between items-center pt-4 border-t\">\n                  <span className=\"text-lg font-semibold text-slate-700\">True Total Cost</span>\n                  <span className=\"text-3xl font-bold text-primary\">$300K</span>\n                </div>\n              </div>\n            </Card>\n          </motion.div>\n\n          {/* Hidden Cost Breakdown Accordion */}\n          <motion.div\n            className=\"mb-8\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 20 }}\n            transition={{ duration: 0.6, delay: 0.4 }}\n          >\n            <Accordion type=\"single\" collapsible className=\"w-full\">\n              <AccordionItem value=\"hidden-costs\" className=\"border rounded-lg\">\n                <AccordionTrigger \n                  className=\"px-6 py-4 hover:no-underline hover-elevate\"\n                  data-testid=\"button-expand-hidden-costs\"\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <span className=\"text-lg font-bold text-red-600\">Where does the $220K go?</span>\n                    <div className=\"text-sm text-muted-foreground\">(7 cost categories)</div>\n                  </div>\n                </AccordionTrigger>\n                <AccordionContent className=\"px-6 pb-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {hiddenCosts.map((cost, index) => {\n                      const Icon = cost.icon;\n                      return (\n                        <motion.div\n                          key={index}\n                          className=\"p-4 border rounded-lg hover-elevate cursor-pointer group\"\n                          data-testid={`cost-category-${cost.label.toLowerCase().replace(/\\s+/g, '-')}`}\n                          initial={{ opacity: 0, y: 10 }}\n                          animate={{ opacity: 1, y: 0 }}\n                          transition={{ duration: 0.3, delay: index * 0.05 }}\n                        >\n                          <div className=\"flex items-start gap-3 mb-3\">\n                            <div className=\"p-2 bg-red-50 rounded-lg\">\n                              <Icon className=\"w-5 h-5 text-red-600\" />\n                            </div>\n                            <div className=\"flex-1\">\n                              <div className=\"flex justify-between items-start mb-1\">\n                                <h4 className=\"font-bold text-sm text-slate-800\">{cost.label}</h4>\n                                <span className=\"font-bold text-red-600 text-sm\">{cost.cost}</span>\n                              </div>\n                              <p className=\"text-xs text-slate-600 mb-2\">{cost.description}</p>\n                            </div>\n                          </div>\n                          {/* Details List */}\n                          <div className=\"space-y-1 pl-11\">\n                            {cost.details.map((detail, detailIndex) => (\n                              <div key={detailIndex} className=\"flex items-center gap-2 text-xs text-slate-500\">\n                                <div className=\"w-1 h-1 bg-red-400 rounded-full flex-shrink-0\" />\n                                <span>{detail}</span>\n                              </div>\n                            ))}\n                          </div>\n                        </motion.div>\n                      );\n                    })}\n                  </div>\n                </AccordionContent>\n              </AccordionItem>\n            </Accordion>\n          </motion.div>\n\n          {/* Compact TPG Solution */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 20 }}\n            transition={{ duration: 0.6, delay: 0.6 }}\n          >\n            <Card className=\"p-8 bg-gradient-to-br from-primary/5 to-orange-50/30 border-primary/20\">\n              <div className=\"text-center space-y-6\">\n                <h3 className=\"text-2xl md:text-3xl font-bold text-foreground\">\n                  With TPG, You Get Everything\n                </h3>\n                <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n                  All infrastructure, management, and support included. One transparent price.\n                </p>\n                \n                {/* Value Props */}\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-6\">\n                  <div className=\"p-4 bg-white/60 rounded-lg border border-primary/20\">\n                    <div className=\"font-bold text-primary mb-1\">All-Inclusive</div>\n                    <p className=\"text-sm text-slate-600\">Everything covered under one roof</p>\n                  </div>\n                  <div className=\"p-4 bg-white/60 rounded-lg border border-primary/20\">\n                    <div className=\"font-bold text-primary mb-1\">Transparent</div>\n                    <p className=\"text-sm text-slate-600\">No hidden fees or surprise costs</p>\n                  </div>\n                  <div className=\"p-4 bg-white/60 rounded-lg border border-primary/20\">\n                    <div className=\"font-bold text-primary mb-1\">Proven</div>\n                    <p className=\"text-sm text-slate-600\">Dedicated team with built-in redundancy</p>\n                  </div>\n                </div>\n                \n                {/* CTA */}\n                <motion.button\n                  className=\"inline-flex items-center gap-2 px-8 py-4 bg-primary text-white font-medium rounded-lg hover-elevate transition-all duration-300 shadow-lg mt-6\"\n                  data-testid=\"button-see-solution\"\n                  whileHover={{ scale: 1.02 }}\n                  whileTap={{ scale: 0.98 }}\n                >\n                  <span>See our solution</span>\n                  <TrendingUp className=\"w-4 h-4\" />\n                </motion.button>\n              </div>\n            </Card>\n          </motion.div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":11305}},"version":1}